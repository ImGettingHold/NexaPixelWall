import { ContractArtifact, SourceArtifact } from '@nexscript/utils';
import { Argument } from './Argument.js';
import { ContractOptions, Utxo } from './interfaces.js';
import NetworkProvider from './network/NetworkProvider.js';
import { Contract } from './Contract.js';
import { Transaction } from './Transaction.js';
export interface McpContractParameters {
    contractName: string;
    functionName: string | undefined;
    parameters: Argument[];
}
export declare class McpContract {
    private constructorArgs;
    private options?;
    name: string;
    address: string;
    bytecode: string;
    bytesize: number;
    opcount: number;
    contract: Contract;
    provider: NetworkProvider;
    private artifact;
    /**
     * Create new MCP contract instance
     * @param {SourceArtifact | ContractArtifact} artifact - MCP Contract artifact, see @ref compileString
     * @param {Argument[]} constructorArgs - MCP Contract constraint parameters
     * @param {NetworkProvider} provider - Network provider for network interactions
     */
    constructor(artifact: SourceArtifact | ContractArtifact, constructorArgs: Argument[], options?: Omit<ContractOptions, "contractName"> | undefined);
    getBalance(): Promise<bigint>;
    getUtxos(): Promise<Utxo[]>;
    execute({ contractName, functionName, parameters }: McpContractParameters): Transaction;
}
