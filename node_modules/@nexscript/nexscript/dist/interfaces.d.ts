import { Transaction } from '@bitauth/libauth';
import { ContractCreationParams, ContractDependency } from '@nexscript/utils';
import type SignatureTemplate from './SignatureTemplate.js';
import { NetworkProvider } from './network/index.js';
export interface Utxo {
    txid: string;
    vout: number;
    satoshis: bigint;
    address: string;
    token?: TokenDetails;
}
export interface UnlockableUtxo extends Utxo {
    unlocker: Unlocker;
    options?: InputOptions;
}
export declare function isUnlockableUtxo(utxo: Utxo): utxo is UnlockableUtxo;
export interface InputOptions {
    sequence?: number;
}
export interface AddInputOptions {
    transaction: any;
    input: Utxo;
}
export interface SignInputOptions {
    transaction: any;
    inputIndex: number;
    network: string;
}
export interface Unlocker {
    addInput: (options: AddInputOptions) => void;
    signInput: (options: SignInputOptions) => void;
}
export interface UtxoP2PKT extends Utxo {
    template: SignatureTemplate;
}
export declare function isUtxoP2PKT(utxo: Utxo): utxo is UtxoP2PKT;
export interface Recipient {
    to: string;
    amount: bigint;
    token?: TokenDetails;
}
export interface Output {
    to: string | Uint8Array;
    amount: bigint;
    token?: TokenDetails;
}
export interface TokenDetails {
    amount: bigint;
    groupId: string;
}
export interface NftObject {
    groupId: string;
    commitment: string;
    amount: bigint;
}
export declare enum SignatureAlgorithm {
    ECDSA = 0,
    SCHNORR = 1
}
export declare enum HashType {
    SIGHASH_ALL = 1,
    SIGHASH_NONE = 2,
    SIGHASH_SINGLE = 3,
    SIGHASH_ANYONECANPAY = 128
}
export declare const Network: {
    MAINNET: "mainnet";
    TESTNET3: "testnet3";
    TESTNET4: "testnet4";
    CHIPNET: "chipnet";
    TESTNET: "testnet";
    STAGING: "staging";
    REGTEST: "regtest";
};
export type Network = (typeof Network)[keyof typeof Network];
export interface TransactionDetails extends Transaction {
    txid: string;
    hex: string;
}
export type ContractDependencies = {
    [contractName: string]: ContractDependency | ContractCreationParams;
};
export interface ContractOptions {
    provider?: NetworkProvider;
    contractName?: string;
    dependencyArgs?: ContractDependencies;
}
