import { ContractArtifact, SourceArtifact } from '@nexscript/utils';
import { Transaction } from './Transaction.js';
import { Argument } from './Argument.js';
import { ContractOptions, Unlocker, Utxo } from './interfaces.js';
import NetworkProvider from './network/NetworkProvider.js';
export declare class Contract {
    private options?;
    name: string;
    address: string;
    bytecode: string;
    bytesize: number;
    opcount: number;
    artifact: ContractArtifact;
    functions: Record<string, ContractFunction>;
    unlock: Record<string, ContractUnlocker>;
    private redeemScript;
    private templateScript;
    private constraintScript;
    private visibleArgs;
    private dependencyArgs;
    provider: NetworkProvider;
    /**
     * Create new contract instance
     * @param {SourceArtifact | ContractArtifact} artifact - Artifact to instantiate the contract. See @ref compileString
     * @param {Argument[]} constructorArgs - Contract constraint parameters
     * @param {NetworkProvider?} options.provider - Network provider for network interactions
     * @param {string?} options.contractName - if `artifact` is of type SourceArtifact, the name of contract to be instantiated
     * @param {ContractDependencies?} options.dependencyArgs - dependent contract creation parameters
     */
    constructor(artifact: SourceArtifact | ContractArtifact, constructorArgs: Argument[], options?: ContractOptions | undefined);
    tokenAddress(groupId: string, amount: bigint): string;
    getBalance(): Promise<bigint>;
    getUtxos(): Promise<Utxo[]>;
    private createFunction;
    private createUnlocker;
}
export type ContractFunction = (...args: Argument[]) => Transaction;
export type ContractUnlocker = (...args: Argument[]) => Unlocker;
