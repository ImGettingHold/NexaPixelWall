import { Transaction } from '@bitauth/libauth';
import { AbiInput, ContractArtifact, ContractCreationParams, Script } from '@nexscript/utils';
import { Utxo, Output, Recipient, ContractDependencies } from './interfaces.js';
import { FailedTransactionError } from './Errors.js';
import { Argument } from './Argument.js';
export declare function validateRecipient(recipient: Recipient): void;
export declare function getInputSize(inputScript: Uint8Array): number;
export declare function getPreimageSize(script: Uint8Array): number;
export declare function getTxSizeWithoutInputs(outputs: Output[]): number;
export declare function createInputScript(redeemScript: Script, encodedArgs: Uint8Array[], selector?: number, preimage?: Uint8Array): Uint8Array;
export declare function createOpReturnOutput(opReturnData: string[]): Output;
export declare function createSighashPreimage(transaction: Transaction, input: Utxo, inputIndex: number, coveredBytecode: Uint8Array, hashtype: number): Uint8Array;
export declare function buildError(reason: string, meepStr: string): FailedTransactionError;
export declare function meep(tx: any, utxos: Utxo[], script: Script): string;
export declare function scriptTemplateToAddress(template: Script, constraints: Script, extraArgs?: Script, network?: string): string;
export declare function scriptTemplateToGroupLockingScript(groupId: string, amount: bigint, template: Script, constraints: Script, extraArgs?: Script): any;
export declare function scriptTemplateToGroupAddress(groupId: string, amount: bigint, template: Script, constraints: Script, extraArgs?: Script, network?: string): string;
export declare function toGroupAddress(address: string, groupId: string, groupAmount: bigint, network?: string): string;
export declare function toNexaAddress(address: string, network?: string): string;
export declare function scriptToNexaAddress(lockingScript: any, // nexcore.Script,
network?: string): string;
export declare function scriptToAddress(script: Script, network: string): string;
export declare function scriptToLockingBytecode(script: Script): Uint8Array;
export declare function utxoComparator(a: Utxo, b: Utxo): number;
export declare function utxoTokenComparator(a: Utxo, b: Utxo): number;
/**
* Helper function to convert an address to a locking script
*
* @param address   Address to convert to locking script
*
* @returns a locking script corresponding to the passed address
*/
export declare function addressToLockScript(address: string): Uint8Array;
export declare function getNetworkPrefix(network: string): 'nexa' | 'nexatest' | 'nexareg';
export declare function encodeNullDataScript(chunks: (number | Uint8Array)[]): Uint8Array;
export declare const getContractCreationParamsFromAddress: (address: string) => ContractCreationParams;
export declare const encodeArguments: (constructorArgs: Argument[], constructorInputs: AbiInput[], contractName: string) => {
    encodedArgs: Uint8Array[];
    visibleArgs: Uint8Array[];
};
export declare const replaceDependencyArgs: (artifact: ContractArtifact, dependencyArgs?: ContractDependencies) => {
    [contractName: string]: ContractCreationParams;
};
