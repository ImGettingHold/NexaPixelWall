export var NullaryOperator;
(function (NullaryOperator) {
    NullaryOperator["INPUT_INDEX"] = "this.activeInputIndex";
    NullaryOperator["BYTECODE"] = "this.activeBytecode";
    NullaryOperator["INPUT_COUNT"] = "tx.inputs.length";
    NullaryOperator["OUTPUT_COUNT"] = "tx.outputs.length";
    NullaryOperator["VERSION"] = "tx.version";
    NullaryOperator["LOCKTIME"] = "tx.locktime";
    NullaryOperator["ID"] = "tx.id";
    NullaryOperator["IDEM"] = "tx.idem";
    NullaryOperator["AMOUNT_IN"] = "tx.amountIn";
    NullaryOperator["AMOUNT_OUT"] = "tx.amountOut";
})(NullaryOperator || (NullaryOperator = {}));
export var UnaryOperator;
(function (UnaryOperator) {
    UnaryOperator["NOT"] = "!";
    UnaryOperator["NEGATE"] = "-";
    UnaryOperator["SIZE"] = ".length";
    UnaryOperator["REVERSE"] = ".reverse()";
    UnaryOperator["INPUT_VALUE"] = "tx.inputs[i].value";
    UnaryOperator["INPUT_LOCKING_BYTECODE"] = "tx.inputs[i].lockingBytecode";
    UnaryOperator["INPUT_OUTPOINT_HASH"] = "tx.inputs[i].outpointTransactionHash";
    UnaryOperator["INPUT_OUTPOINT_INDEX"] = "tx.inputs[i].outpointIndex";
    UnaryOperator["INPUT_UNLOCKING_BYTECODE"] = "tx.inputs[i].unlockingBytecode";
    UnaryOperator["INPUT_SEQUENCE_NUMBER"] = "tx.inputs[i].sequenceNumber";
    UnaryOperator["OUTPUT_VALUE"] = "tx.outputs[i].value";
    UnaryOperator["OUTPUT_LOCKING_BYTECODE"] = "tx.outputs[i].lockingBytecode";
    UnaryOperator["INPUT_TOKEN_GROUP_ID"] = "tx.inputs[i].tokenGroupId";
    UnaryOperator["OUTPUT_TOKEN_GROUP_ID"] = "tx.outputs[i].tokenGroupId";
    UnaryOperator["INPUT_TOKEN_SUBGROUP_ID"] = "tx.inputs[i].tokenSubgroupId";
    UnaryOperator["OUTPUT_TOKEN_SUBGROUP_ID"] = "tx.outputs[i].tokenSubgroupId";
    UnaryOperator["INPUT_SUBGROUP_DATA"] = "tx.inputs[i].subgroupData";
    UnaryOperator["OUTPUT_SUBGROUP_DATA"] = "tx.outputs[i].subgroupData";
    UnaryOperator["INPUT_TOKEN_AMOUNT"] = "tx.inputs[i].tokenAmount";
    UnaryOperator["OUTPUT_TOKEN_AMOUNT"] = "tx.outputs[i].tokenAmount";
    UnaryOperator["INPUT_VISIBLE_PARAMETERS"] = "tx.inputs[i].visibleParameters";
    UnaryOperator["OUTPUT_VISIBLE_PARAMETERS"] = "tx.outputs[i].visibleParameters";
})(UnaryOperator || (UnaryOperator = {}));
export var BinaryOperator;
(function (BinaryOperator) {
    BinaryOperator["MUL"] = "*";
    BinaryOperator["DIV"] = "/";
    BinaryOperator["MOD"] = "%";
    BinaryOperator["PLUS"] = "+";
    BinaryOperator["MINUS"] = "-";
    BinaryOperator["LT"] = "<";
    BinaryOperator["LE"] = "<=";
    BinaryOperator["GT"] = ">";
    BinaryOperator["GE"] = ">=";
    BinaryOperator["EQ"] = "==";
    BinaryOperator["NE"] = "!=";
    BinaryOperator["BIT_AND"] = "&";
    BinaryOperator["BIT_XOR"] = "^";
    BinaryOperator["BIT_OR"] = "|";
    BinaryOperator["AND"] = "&&";
    BinaryOperator["OR"] = "||";
    BinaryOperator["SPLIT"] = ".split";
})(BinaryOperator || (BinaryOperator = {}));
//# sourceMappingURL=Operator.js.map