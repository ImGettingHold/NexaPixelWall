// Generated from src/grammar/CashScript.g4 by ANTLR 4.9.0-SNAPSHOT
import { ATN } from "antlr4ts/atn/ATN.js";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer.js";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException.js";
import { NoViableAltException } from "antlr4ts/NoViableAltException.js";
import { Parser } from "antlr4ts/Parser.js";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext.js";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator.js";
import { RecognitionException } from "antlr4ts/RecognitionException.js";
import { Token } from "antlr4ts/Token.js";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl.js";
import * as Utils from "antlr4ts/misc/Utils.js";
export class CashScriptParser extends Parser {
    // @Override
    // @NotNull
    get vocabulary() {
        return CashScriptParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "CashScript.g4"; }
    // @Override
    get ruleNames() { return CashScriptParser.ruleNames; }
    // @Override
    get serializedATN() { return CashScriptParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new FailedPredicateException(this, predicate, message);
    }
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator(CashScriptParser._ATN, this);
    }
    // @RuleVersion(0)
    sourceFile() {
        let _localctx = new SourceFileContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, CashScriptParser.RULE_sourceFile);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 57;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__0) {
                    {
                        {
                            this.state = 54;
                            this.pragmaDirective();
                        }
                    }
                    this.state = 59;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 63;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__10) {
                    {
                        {
                            this.state = 60;
                            this.contractDefinition();
                        }
                    }
                    this.state = 65;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 66;
                this.match(CashScriptParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    pragmaDirective() {
        let _localctx = new PragmaDirectiveContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, CashScriptParser.RULE_pragmaDirective);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 68;
                this.match(CashScriptParser.T__0);
                this.state = 69;
                this.pragmaName();
                this.state = 70;
                this.pragmaValue();
                this.state = 71;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    pragmaName() {
        let _localctx = new PragmaNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, CashScriptParser.RULE_pragmaName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 73;
                this.match(CashScriptParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    pragmaValue() {
        let _localctx = new PragmaValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, CashScriptParser.RULE_pragmaValue);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 75;
                this.versionConstraint();
                this.state = 77;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__3) | (1 << CashScriptParser.T__4) | (1 << CashScriptParser.T__5) | (1 << CashScriptParser.T__6) | (1 << CashScriptParser.T__7) | (1 << CashScriptParser.T__8) | (1 << CashScriptParser.T__9))) !== 0) || _la === CashScriptParser.VersionLiteral) {
                    {
                        this.state = 76;
                        this.versionConstraint();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    versionConstraint() {
        let _localctx = new VersionConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, CashScriptParser.RULE_versionConstraint);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 80;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__3) | (1 << CashScriptParser.T__4) | (1 << CashScriptParser.T__5) | (1 << CashScriptParser.T__6) | (1 << CashScriptParser.T__7) | (1 << CashScriptParser.T__8) | (1 << CashScriptParser.T__9))) !== 0)) {
                    {
                        this.state = 79;
                        this.versionOperator();
                    }
                }
                this.state = 82;
                this.match(CashScriptParser.VersionLiteral);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    versionOperator() {
        let _localctx = new VersionOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, CashScriptParser.RULE_versionOperator);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 84;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__3) | (1 << CashScriptParser.T__4) | (1 << CashScriptParser.T__5) | (1 << CashScriptParser.T__6) | (1 << CashScriptParser.T__7) | (1 << CashScriptParser.T__8) | (1 << CashScriptParser.T__9))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    contractDefinition() {
        let _localctx = new ContractDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, CashScriptParser.RULE_contractDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 86;
                this.match(CashScriptParser.T__10);
                this.state = 87;
                this.match(CashScriptParser.Identifier);
                this.state = 88;
                this.parameterList();
                this.state = 89;
                this.match(CashScriptParser.T__11);
                this.state = 93;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__10) {
                    {
                        {
                            this.state = 90;
                            this.contractDefinition();
                        }
                    }
                    this.state = 95;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 99;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__15) {
                    {
                        {
                            this.state = 96;
                            this.functionDefinition();
                        }
                    }
                    this.state = 101;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 102;
                this.match(CashScriptParser.T__12);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    parameterModifier() {
        let _localctx = new ParameterModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, CashScriptParser.RULE_parameterModifier);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 104;
                _la = this._input.LA(1);
                if (!(_la === CashScriptParser.T__13 || _la === CashScriptParser.T__14)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionDefinition() {
        let _localctx = new FunctionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, CashScriptParser.RULE_functionDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 106;
                this.match(CashScriptParser.T__15);
                this.state = 107;
                this.match(CashScriptParser.Identifier);
                this.state = 108;
                this.parameterList();
                this.state = 109;
                this.match(CashScriptParser.T__11);
                this.state = 113;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__19 || _la === CashScriptParser.T__21 || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (CashScriptParser.T__66 - 67)) | (1 << (CashScriptParser.T__67 - 67)) | (1 << (CashScriptParser.T__68 - 67)) | (1 << (CashScriptParser.T__69 - 67)) | (1 << (CashScriptParser.T__70 - 67)) | (1 << (CashScriptParser.T__71 - 67)) | (1 << (CashScriptParser.Bytes - 67)) | (1 << (CashScriptParser.Identifier - 67)))) !== 0)) {
                    {
                        {
                            this.state = 110;
                            this.statement();
                        }
                    }
                    this.state = 115;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 116;
                this.match(CashScriptParser.T__12);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    parameterList() {
        let _localctx = new ParameterListContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, CashScriptParser.RULE_parameterList);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 118;
                this.match(CashScriptParser.T__16);
                this.state = 130;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (CashScriptParser.T__66 - 67)) | (1 << (CashScriptParser.T__67 - 67)) | (1 << (CashScriptParser.T__68 - 67)) | (1 << (CashScriptParser.T__69 - 67)) | (1 << (CashScriptParser.T__70 - 67)) | (1 << (CashScriptParser.T__71 - 67)) | (1 << (CashScriptParser.Bytes - 67)))) !== 0)) {
                    {
                        this.state = 119;
                        this.parameter();
                        this.state = 124;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 120;
                                        this.match(CashScriptParser.T__17);
                                        this.state = 121;
                                        this.parameter();
                                    }
                                }
                            }
                            this.state = 126;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                        }
                        this.state = 128;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === CashScriptParser.T__17) {
                            {
                                this.state = 127;
                                this.match(CashScriptParser.T__17);
                            }
                        }
                    }
                }
                this.state = 132;
                this.match(CashScriptParser.T__18);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    parameter() {
        let _localctx = new ParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, CashScriptParser.RULE_parameter);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 134;
                this.typeName();
                this.state = 138;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__13 || _la === CashScriptParser.T__14) {
                    {
                        {
                            this.state = 135;
                            this.parameterModifier();
                        }
                    }
                    this.state = 140;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 141;
                this.match(CashScriptParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    block() {
        let _localctx = new BlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, CashScriptParser.RULE_block);
        let _la;
        try {
            this.state = 152;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case CashScriptParser.T__11:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 143;
                        this.match(CashScriptParser.T__11);
                        this.state = 147;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === CashScriptParser.T__19 || _la === CashScriptParser.T__21 || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (CashScriptParser.T__66 - 67)) | (1 << (CashScriptParser.T__67 - 67)) | (1 << (CashScriptParser.T__68 - 67)) | (1 << (CashScriptParser.T__69 - 67)) | (1 << (CashScriptParser.T__70 - 67)) | (1 << (CashScriptParser.T__71 - 67)) | (1 << (CashScriptParser.Bytes - 67)) | (1 << (CashScriptParser.Identifier - 67)))) !== 0)) {
                            {
                                {
                                    this.state = 144;
                                    this.statement();
                                }
                            }
                            this.state = 149;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 150;
                        this.match(CashScriptParser.T__12);
                    }
                    break;
                case CashScriptParser.T__19:
                case CashScriptParser.T__21:
                case CashScriptParser.T__66:
                case CashScriptParser.T__67:
                case CashScriptParser.T__68:
                case CashScriptParser.T__69:
                case CashScriptParser.T__70:
                case CashScriptParser.T__71:
                case CashScriptParser.Bytes:
                case CashScriptParser.Identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 151;
                        this.statement();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    statement() {
        let _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, CashScriptParser.RULE_statement);
        try {
            this.state = 160;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 13, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 154;
                        this.variableDefinition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 155;
                        this.tupleAssignment();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 156;
                        this.assignStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 157;
                        this.timeOpStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 158;
                        this.requireStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 159;
                        this.ifStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    variableDefinition() {
        let _localctx = new VariableDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, CashScriptParser.RULE_variableDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 162;
                this.typeName();
                this.state = 166;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__65) {
                    {
                        {
                            this.state = 163;
                            this.modifier();
                        }
                    }
                    this.state = 168;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 169;
                this.match(CashScriptParser.Identifier);
                this.state = 170;
                this.match(CashScriptParser.T__9);
                this.state = 171;
                this.expression(0);
                this.state = 172;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tupleAssignment() {
        let _localctx = new TupleAssignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, CashScriptParser.RULE_tupleAssignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 174;
                this.typeName();
                this.state = 175;
                this.match(CashScriptParser.Identifier);
                this.state = 176;
                this.match(CashScriptParser.T__17);
                this.state = 177;
                this.typeName();
                this.state = 178;
                this.match(CashScriptParser.Identifier);
                this.state = 179;
                this.match(CashScriptParser.T__9);
                this.state = 180;
                this.expression(0);
                this.state = 181;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    assignStatement() {
        let _localctx = new AssignStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, CashScriptParser.RULE_assignStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 183;
                this.match(CashScriptParser.Identifier);
                this.state = 184;
                this.match(CashScriptParser.T__9);
                this.state = 185;
                this.expression(0);
                this.state = 186;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timeOpStatement() {
        let _localctx = new TimeOpStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, CashScriptParser.RULE_timeOpStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 188;
                this.match(CashScriptParser.T__19);
                this.state = 189;
                this.match(CashScriptParser.T__16);
                this.state = 190;
                this.match(CashScriptParser.TxVar);
                this.state = 191;
                this.match(CashScriptParser.T__5);
                this.state = 192;
                this.expression(0);
                this.state = 193;
                this.match(CashScriptParser.T__18);
                this.state = 194;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    requireStatement() {
        let _localctx = new RequireStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, CashScriptParser.RULE_requireStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 196;
                this.match(CashScriptParser.T__19);
                this.state = 197;
                this.match(CashScriptParser.T__16);
                this.state = 198;
                this.expression(0);
                this.state = 199;
                this.match(CashScriptParser.T__18);
                this.state = 200;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    merkleRootMacro() {
        let _localctx = new MerkleRootMacroContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, CashScriptParser.RULE_merkleRootMacro);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 202;
                this.match(CashScriptParser.T__20);
                this.state = 203;
                this.match(CashScriptParser.T__16);
                this.state = 204;
                this.match(CashScriptParser.NumberLiteral);
                this.state = 205;
                this.match(CashScriptParser.T__17);
                this.state = 206;
                this.expression(0);
                this.state = 207;
                this.match(CashScriptParser.T__17);
                this.state = 208;
                this.expression(0);
                this.state = 209;
                this.match(CashScriptParser.T__17);
                this.state = 210;
                this.expression(0);
                this.state = 211;
                this.match(CashScriptParser.T__18);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifStatement() {
        let _localctx = new IfStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, CashScriptParser.RULE_ifStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 213;
                this.match(CashScriptParser.T__21);
                this.state = 214;
                this.match(CashScriptParser.T__16);
                this.state = 215;
                this.expression(0);
                this.state = 216;
                this.match(CashScriptParser.T__18);
                this.state = 217;
                _localctx._ifBlock = this.block();
                this.state = 220;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 15, this._ctx)) {
                    case 1:
                        {
                            this.state = 218;
                            this.match(CashScriptParser.T__22);
                            this.state = 219;
                            _localctx._elseBlock = this.block();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionCall() {
        let _localctx = new FunctionCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, CashScriptParser.RULE_functionCall);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 222;
                this.match(CashScriptParser.Identifier);
                this.state = 223;
                this.expressionList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expressionList() {
        let _localctx = new ExpressionListContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, CashScriptParser.RULE_expressionList);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 225;
                this.match(CashScriptParser.T__16);
                this.state = 237;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 17)) & ~0x1F) === 0 && ((1 << (_la - 17)) & ((1 << (CashScriptParser.T__16 - 17)) | (1 << (CashScriptParser.T__20 - 17)) | (1 << (CashScriptParser.T__23 - 17)) | (1 << (CashScriptParser.T__35 - 17)) | (1 << (CashScriptParser.T__36 - 17)) | (1 << (CashScriptParser.T__38 - 17)) | (1 << (CashScriptParser.T__45 - 17)))) !== 0) || ((((_la - 54)) & ~0x1F) === 0 && ((1 << (_la - 54)) & ((1 << (CashScriptParser.T__53 - 54)) | (1 << (CashScriptParser.T__54 - 54)) | (1 << (CashScriptParser.T__66 - 54)) | (1 << (CashScriptParser.T__67 - 54)) | (1 << (CashScriptParser.T__68 - 54)) | (1 << (CashScriptParser.T__69 - 54)) | (1 << (CashScriptParser.T__70 - 54)) | (1 << (CashScriptParser.T__71 - 54)) | (1 << (CashScriptParser.BooleanLiteral - 54)) | (1 << (CashScriptParser.NumberLiteral - 54)) | (1 << (CashScriptParser.Bytes - 54)) | (1 << (CashScriptParser.StringLiteral - 54)) | (1 << (CashScriptParser.DateLiteral - 54)) | (1 << (CashScriptParser.HexLiteral - 54)) | (1 << (CashScriptParser.NullaryOp - 54)) | (1 << (CashScriptParser.Identifier - 54)))) !== 0)) {
                    {
                        this.state = 226;
                        this.expression(0);
                        this.state = 231;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 227;
                                        this.match(CashScriptParser.T__17);
                                        this.state = 228;
                                        this.expression(0);
                                    }
                                }
                            }
                            this.state = 233;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
                        }
                        this.state = 235;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === CashScriptParser.T__17) {
                            {
                                this.state = 234;
                                this.match(CashScriptParser.T__17);
                            }
                        }
                    }
                }
                this.state = 239;
                this.match(CashScriptParser.T__18);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new ExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 44;
        this.enterRecursionRule(_localctx, 44, CashScriptParser.RULE_expression, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 300;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 24, this._ctx)) {
                    case 1:
                        {
                            _localctx = new ParenthesisedContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 242;
                            this.match(CashScriptParser.T__16);
                            this.state = 243;
                            this.expression(0);
                            this.state = 244;
                            this.match(CashScriptParser.T__18);
                        }
                        break;
                    case 2:
                        {
                            _localctx = new CastContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 246;
                            this.typeName();
                            this.state = 247;
                            this.match(CashScriptParser.T__16);
                            this.state = 248;
                            _localctx._castable = this.expression(0);
                            this.state = 251;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 19, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 249;
                                        this.match(CashScriptParser.T__17);
                                        this.state = 250;
                                        _localctx._size = this.expression(0);
                                    }
                                    break;
                            }
                            this.state = 254;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === CashScriptParser.T__17) {
                                {
                                    this.state = 253;
                                    this.match(CashScriptParser.T__17);
                                }
                            }
                            this.state = 256;
                            this.match(CashScriptParser.T__18);
                        }
                        break;
                    case 3:
                        {
                            _localctx = new FunctionCallExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 258;
                            this.functionCall();
                        }
                        break;
                    case 4:
                        {
                            _localctx = new MerkleRootMacroExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 259;
                            this.merkleRootMacro();
                        }
                        break;
                    case 5:
                        {
                            _localctx = new FunctionCallExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 260;
                            _localctx._scope = this.match(CashScriptParser.T__23);
                            this.state = 261;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__24) | (1 << CashScriptParser.T__25) | (1 << CashScriptParser.T__26) | (1 << CashScriptParser.T__27) | (1 << CashScriptParser.T__28) | (1 << CashScriptParser.T__29))) !== 0))) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 262;
                            this.expressionList();
                        }
                        break;
                    case 6:
                        {
                            _localctx = new ContractAccessorContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 263;
                            this.match(CashScriptParser.Identifier);
                            this.state = 264;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 31)) & ~0x1F) === 0 && ((1 << (_la - 31)) & ((1 << (CashScriptParser.T__30 - 31)) | (1 << (CashScriptParser.T__31 - 31)) | (1 << (CashScriptParser.T__32 - 31)) | (1 << (CashScriptParser.T__33 - 31)) | (1 << (CashScriptParser.T__34 - 31)))) !== 0))) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case 7:
                        {
                            _localctx = new InstantiationContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 265;
                            this.match(CashScriptParser.T__35);
                            this.state = 266;
                            this.match(CashScriptParser.Identifier);
                            this.state = 267;
                            this.expressionList();
                        }
                        break;
                    case 8:
                        {
                            _localctx = new UnaryIntrospectionOpContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 268;
                            _localctx._scope = this.match(CashScriptParser.T__38);
                            this.state = 269;
                            this.match(CashScriptParser.T__36);
                            this.state = 270;
                            this.expression(0);
                            this.state = 271;
                            this.match(CashScriptParser.T__37);
                            this.state = 272;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (CashScriptParser.T__34 - 35)) | (1 << (CashScriptParser.T__39 - 35)) | (1 << (CashScriptParser.T__40 - 35)) | (1 << (CashScriptParser.T__41 - 35)) | (1 << (CashScriptParser.T__42 - 35)) | (1 << (CashScriptParser.T__43 - 35)) | (1 << (CashScriptParser.T__44 - 35)))) !== 0))) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case 9:
                        {
                            _localctx = new UnaryIntrospectionOpContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 274;
                            _localctx._scope = this.match(CashScriptParser.T__45);
                            this.state = 275;
                            this.match(CashScriptParser.T__36);
                            this.state = 276;
                            this.expression(0);
                            this.state = 277;
                            this.match(CashScriptParser.T__37);
                            this.state = 278;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (CashScriptParser.T__34 - 35)) | (1 << (CashScriptParser.T__39 - 35)) | (1 << (CashScriptParser.T__40 - 35)) | (1 << (CashScriptParser.T__41 - 35)) | (1 << (CashScriptParser.T__42 - 35)) | (1 << (CashScriptParser.T__43 - 35)) | (1 << (CashScriptParser.T__44 - 35)) | (1 << (CashScriptParser.T__46 - 35)) | (1 << (CashScriptParser.T__47 - 35)) | (1 << (CashScriptParser.T__48 - 35)) | (1 << (CashScriptParser.T__49 - 35)))) !== 0))) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case 10:
                        {
                            _localctx = new UnaryOpContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 280;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === CashScriptParser.T__53 || _la === CashScriptParser.T__54)) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 281;
                            this.expression(14);
                        }
                        break;
                    case 11:
                        {
                            _localctx = new ArrayContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 282;
                            this.match(CashScriptParser.T__36);
                            this.state = 294;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (((((_la - 17)) & ~0x1F) === 0 && ((1 << (_la - 17)) & ((1 << (CashScriptParser.T__16 - 17)) | (1 << (CashScriptParser.T__20 - 17)) | (1 << (CashScriptParser.T__23 - 17)) | (1 << (CashScriptParser.T__35 - 17)) | (1 << (CashScriptParser.T__36 - 17)) | (1 << (CashScriptParser.T__38 - 17)) | (1 << (CashScriptParser.T__45 - 17)))) !== 0) || ((((_la - 54)) & ~0x1F) === 0 && ((1 << (_la - 54)) & ((1 << (CashScriptParser.T__53 - 54)) | (1 << (CashScriptParser.T__54 - 54)) | (1 << (CashScriptParser.T__66 - 54)) | (1 << (CashScriptParser.T__67 - 54)) | (1 << (CashScriptParser.T__68 - 54)) | (1 << (CashScriptParser.T__69 - 54)) | (1 << (CashScriptParser.T__70 - 54)) | (1 << (CashScriptParser.T__71 - 54)) | (1 << (CashScriptParser.BooleanLiteral - 54)) | (1 << (CashScriptParser.NumberLiteral - 54)) | (1 << (CashScriptParser.Bytes - 54)) | (1 << (CashScriptParser.StringLiteral - 54)) | (1 << (CashScriptParser.DateLiteral - 54)) | (1 << (CashScriptParser.HexLiteral - 54)) | (1 << (CashScriptParser.NullaryOp - 54)) | (1 << (CashScriptParser.Identifier - 54)))) !== 0)) {
                                {
                                    this.state = 283;
                                    this.expression(0);
                                    this.state = 288;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 284;
                                                    this.match(CashScriptParser.T__17);
                                                    this.state = 285;
                                                    this.expression(0);
                                                }
                                            }
                                        }
                                        this.state = 290;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
                                    }
                                    this.state = 292;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === CashScriptParser.T__17) {
                                        {
                                            this.state = 291;
                                            this.match(CashScriptParser.T__17);
                                        }
                                    }
                                }
                            }
                            this.state = 296;
                            this.match(CashScriptParser.T__37);
                        }
                        break;
                    case 12:
                        {
                            _localctx = new NullaryOpContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 297;
                            this.match(CashScriptParser.NullaryOp);
                        }
                        break;
                    case 13:
                        {
                            _localctx = new IdentifierContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 298;
                            this.match(CashScriptParser.Identifier);
                        }
                        break;
                    case 14:
                        {
                            _localctx = new LiteralExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 299;
                            this.literal();
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 343;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 341;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 25, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 302;
                                        if (!(this.precpred(this._ctx, 13))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
                                        }
                                        this.state = 303;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(((((_la - 56)) & ~0x1F) === 0 && ((1 << (_la - 56)) & ((1 << (CashScriptParser.T__55 - 56)) | (1 << (CashScriptParser.T__56 - 56)) | (1 << (CashScriptParser.T__57 - 56)))) !== 0))) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 304;
                                        _localctx._right = this.expression(14);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 305;
                                        if (!(this.precpred(this._ctx, 12))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
                                        }
                                        this.state = 306;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === CashScriptParser.T__54 || _la === CashScriptParser.T__58)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 307;
                                        _localctx._right = this.expression(13);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 308;
                                        if (!(this.precpred(this._ctx, 11))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
                                        }
                                        this.state = 309;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__5) | (1 << CashScriptParser.T__6) | (1 << CashScriptParser.T__7) | (1 << CashScriptParser.T__8))) !== 0))) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 310;
                                        _localctx._right = this.expression(12);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 311;
                                        if (!(this.precpred(this._ctx, 10))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                                        }
                                        this.state = 312;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === CashScriptParser.T__59 || _la === CashScriptParser.T__60)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 313;
                                        _localctx._right = this.expression(11);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 314;
                                        if (!(this.precpred(this._ctx, 9))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                                        }
                                        this.state = 315;
                                        _localctx._op = this.match(CashScriptParser.T__61);
                                        this.state = 316;
                                        _localctx._right = this.expression(10);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 317;
                                        if (!(this.precpred(this._ctx, 8))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                                        }
                                        this.state = 318;
                                        _localctx._op = this.match(CashScriptParser.T__3);
                                        this.state = 319;
                                        _localctx._right = this.expression(9);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 320;
                                        if (!(this.precpred(this._ctx, 7))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                                        }
                                        this.state = 321;
                                        _localctx._op = this.match(CashScriptParser.T__62);
                                        this.state = 322;
                                        _localctx._right = this.expression(8);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 323;
                                        if (!(this.precpred(this._ctx, 6))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                                        }
                                        this.state = 324;
                                        _localctx._op = this.match(CashScriptParser.T__63);
                                        this.state = 325;
                                        _localctx._right = this.expression(7);
                                    }
                                    break;
                                case 9:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 326;
                                        if (!(this.precpred(this._ctx, 5))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                                        }
                                        this.state = 327;
                                        _localctx._op = this.match(CashScriptParser.T__64);
                                        this.state = 328;
                                        _localctx._right = this.expression(6);
                                    }
                                    break;
                                case 10:
                                    {
                                        _localctx = new TupleIndexOpContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 329;
                                        if (!(this.precpred(this._ctx, 19))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 19)");
                                        }
                                        this.state = 330;
                                        this.match(CashScriptParser.T__36);
                                        this.state = 331;
                                        _localctx._index = this.match(CashScriptParser.NumberLiteral);
                                        this.state = 332;
                                        this.match(CashScriptParser.T__37);
                                    }
                                    break;
                                case 11:
                                    {
                                        _localctx = new UnaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 333;
                                        if (!(this.precpred(this._ctx, 16))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 16)");
                                        }
                                        this.state = 334;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === CashScriptParser.T__50 || _la === CashScriptParser.T__51)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                                case 12:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 335;
                                        if (!(this.precpred(this._ctx, 15))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 15)");
                                        }
                                        this.state = 336;
                                        _localctx._op = this.match(CashScriptParser.T__52);
                                        this.state = 337;
                                        this.match(CashScriptParser.T__16);
                                        this.state = 338;
                                        _localctx._right = this.expression(0);
                                        this.state = 339;
                                        this.match(CashScriptParser.T__18);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 345;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 26, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    modifier() {
        let _localctx = new ModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, CashScriptParser.RULE_modifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 346;
                this.match(CashScriptParser.T__65);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    literal() {
        let _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, CashScriptParser.RULE_literal);
        try {
            this.state = 353;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case CashScriptParser.BooleanLiteral:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 348;
                        this.match(CashScriptParser.BooleanLiteral);
                    }
                    break;
                case CashScriptParser.NumberLiteral:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 349;
                        this.numberLiteral();
                    }
                    break;
                case CashScriptParser.StringLiteral:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 350;
                        this.match(CashScriptParser.StringLiteral);
                    }
                    break;
                case CashScriptParser.DateLiteral:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 351;
                        this.match(CashScriptParser.DateLiteral);
                    }
                    break;
                case CashScriptParser.HexLiteral:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 352;
                        this.match(CashScriptParser.HexLiteral);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    numberLiteral() {
        let _localctx = new NumberLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, CashScriptParser.RULE_numberLiteral);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 355;
                this.match(CashScriptParser.NumberLiteral);
                this.state = 357;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 28, this._ctx)) {
                    case 1:
                        {
                            this.state = 356;
                            this.match(CashScriptParser.NumberUnit);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeName() {
        let _localctx = new TypeNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, CashScriptParser.RULE_typeName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 359;
                _la = this._input.LA(1);
                if (!(((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (CashScriptParser.T__66 - 67)) | (1 << (CashScriptParser.T__67 - 67)) | (1 << (CashScriptParser.T__68 - 67)) | (1 << (CashScriptParser.T__69 - 67)) | (1 << (CashScriptParser.T__70 - 67)) | (1 << (CashScriptParser.T__71 - 67)) | (1 << (CashScriptParser.Bytes - 67)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 22:
                return this.expression_sempred(_localctx, predIndex);
        }
        return true;
    }
    expression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 13);
            case 1:
                return this.precpred(this._ctx, 12);
            case 2:
                return this.precpred(this._ctx, 11);
            case 3:
                return this.precpred(this._ctx, 10);
            case 4:
                return this.precpred(this._ctx, 9);
            case 5:
                return this.precpred(this._ctx, 8);
            case 6:
                return this.precpred(this._ctx, 7);
            case 7:
                return this.precpred(this._ctx, 6);
            case 8:
                return this.precpred(this._ctx, 5);
            case 9:
                return this.precpred(this._ctx, 19);
            case 10:
                return this.precpred(this._ctx, 16);
            case 11:
                return this.precpred(this._ctx, 15);
        }
        return true;
    }
    static get _ATN() {
        if (!CashScriptParser.__ATN) {
            CashScriptParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CashScriptParser._serializedATN));
        }
        return CashScriptParser.__ATN;
    }
}
CashScriptParser.T__0 = 1;
CashScriptParser.T__1 = 2;
CashScriptParser.T__2 = 3;
CashScriptParser.T__3 = 4;
CashScriptParser.T__4 = 5;
CashScriptParser.T__5 = 6;
CashScriptParser.T__6 = 7;
CashScriptParser.T__7 = 8;
CashScriptParser.T__8 = 9;
CashScriptParser.T__9 = 10;
CashScriptParser.T__10 = 11;
CashScriptParser.T__11 = 12;
CashScriptParser.T__12 = 13;
CashScriptParser.T__13 = 14;
CashScriptParser.T__14 = 15;
CashScriptParser.T__15 = 16;
CashScriptParser.T__16 = 17;
CashScriptParser.T__17 = 18;
CashScriptParser.T__18 = 19;
CashScriptParser.T__19 = 20;
CashScriptParser.T__20 = 21;
CashScriptParser.T__21 = 22;
CashScriptParser.T__22 = 23;
CashScriptParser.T__23 = 24;
CashScriptParser.T__24 = 25;
CashScriptParser.T__25 = 26;
CashScriptParser.T__26 = 27;
CashScriptParser.T__27 = 28;
CashScriptParser.T__28 = 29;
CashScriptParser.T__29 = 30;
CashScriptParser.T__30 = 31;
CashScriptParser.T__31 = 32;
CashScriptParser.T__32 = 33;
CashScriptParser.T__33 = 34;
CashScriptParser.T__34 = 35;
CashScriptParser.T__35 = 36;
CashScriptParser.T__36 = 37;
CashScriptParser.T__37 = 38;
CashScriptParser.T__38 = 39;
CashScriptParser.T__39 = 40;
CashScriptParser.T__40 = 41;
CashScriptParser.T__41 = 42;
CashScriptParser.T__42 = 43;
CashScriptParser.T__43 = 44;
CashScriptParser.T__44 = 45;
CashScriptParser.T__45 = 46;
CashScriptParser.T__46 = 47;
CashScriptParser.T__47 = 48;
CashScriptParser.T__48 = 49;
CashScriptParser.T__49 = 50;
CashScriptParser.T__50 = 51;
CashScriptParser.T__51 = 52;
CashScriptParser.T__52 = 53;
CashScriptParser.T__53 = 54;
CashScriptParser.T__54 = 55;
CashScriptParser.T__55 = 56;
CashScriptParser.T__56 = 57;
CashScriptParser.T__57 = 58;
CashScriptParser.T__58 = 59;
CashScriptParser.T__59 = 60;
CashScriptParser.T__60 = 61;
CashScriptParser.T__61 = 62;
CashScriptParser.T__62 = 63;
CashScriptParser.T__63 = 64;
CashScriptParser.T__64 = 65;
CashScriptParser.T__65 = 66;
CashScriptParser.T__66 = 67;
CashScriptParser.T__67 = 68;
CashScriptParser.T__68 = 69;
CashScriptParser.T__69 = 70;
CashScriptParser.T__70 = 71;
CashScriptParser.T__71 = 72;
CashScriptParser.VersionLiteral = 73;
CashScriptParser.BooleanLiteral = 74;
CashScriptParser.NumberUnit = 75;
CashScriptParser.NumberLiteral = 76;
CashScriptParser.Bytes = 77;
CashScriptParser.Bound = 78;
CashScriptParser.StringLiteral = 79;
CashScriptParser.DateLiteral = 80;
CashScriptParser.HexLiteral = 81;
CashScriptParser.TxVar = 82;
CashScriptParser.NullaryOp = 83;
CashScriptParser.Identifier = 84;
CashScriptParser.WHITESPACE = 85;
CashScriptParser.COMMENT = 86;
CashScriptParser.LINE_COMMENT = 87;
CashScriptParser.RULE_sourceFile = 0;
CashScriptParser.RULE_pragmaDirective = 1;
CashScriptParser.RULE_pragmaName = 2;
CashScriptParser.RULE_pragmaValue = 3;
CashScriptParser.RULE_versionConstraint = 4;
CashScriptParser.RULE_versionOperator = 5;
CashScriptParser.RULE_contractDefinition = 6;
CashScriptParser.RULE_parameterModifier = 7;
CashScriptParser.RULE_functionDefinition = 8;
CashScriptParser.RULE_parameterList = 9;
CashScriptParser.RULE_parameter = 10;
CashScriptParser.RULE_block = 11;
CashScriptParser.RULE_statement = 12;
CashScriptParser.RULE_variableDefinition = 13;
CashScriptParser.RULE_tupleAssignment = 14;
CashScriptParser.RULE_assignStatement = 15;
CashScriptParser.RULE_timeOpStatement = 16;
CashScriptParser.RULE_requireStatement = 17;
CashScriptParser.RULE_merkleRootMacro = 18;
CashScriptParser.RULE_ifStatement = 19;
CashScriptParser.RULE_functionCall = 20;
CashScriptParser.RULE_expressionList = 21;
CashScriptParser.RULE_expression = 22;
CashScriptParser.RULE_modifier = 23;
CashScriptParser.RULE_literal = 24;
CashScriptParser.RULE_numberLiteral = 25;
CashScriptParser.RULE_typeName = 26;
// tslint:disable:no-trailing-whitespace
CashScriptParser.ruleNames = [
    "sourceFile", "pragmaDirective", "pragmaName", "pragmaValue", "versionConstraint",
    "versionOperator", "contractDefinition", "parameterModifier", "functionDefinition",
    "parameterList", "parameter", "block", "statement", "variableDefinition",
    "tupleAssignment", "assignStatement", "timeOpStatement", "requireStatement",
    "merkleRootMacro", "ifStatement", "functionCall", "expressionList", "expression",
    "modifier", "literal", "numberLiteral", "typeName",
];
CashScriptParser._LITERAL_NAMES = [
    undefined, "'pragma'", "';'", "'nexscript'", "'^'", "'~'", "'>='", "'>'",
    "'<'", "'<='", "'='", "'contract'", "'{'", "'}'", "'visible'", "'unused'",
    "'function'", "'('", "','", "')'", "'require'", "'merkleRoot'", "'if'",
    "'else'", "'tx'", "'.groupAmountIn'", "'.groupAmountOut'", "'.groupCountIn'",
    "'.groupCountOut'", "'.groupNthInput'", "'.groupNthOutput'", "'.template'",
    "'.templateHash'", "'.constraintHash'", "'.visibleParams'", "'.lockingBytecode'",
    "'new'", "'['", "']'", "'tx.outputs'", "'.value'", "'.tokenGroupId'",
    "'.tokenSubgroupId'", "'.subgroupData'", "'.tokenAmount'", "'.visibleParameters'",
    "'tx.inputs'", "'.outpointTransactionHash'", "'.outpointIndex'", "'.unlockingBytecode'",
    "'.sequenceNumber'", "'.reverse()'", "'.length'", "'.split'", "'!'", "'-'",
    "'*'", "'/'", "'%'", "'+'", "'=='", "'!='", "'&'", "'|'", "'&&'", "'||'",
    "'constant'", "'int'", "'bool'", "'string'", "'pubkey'", "'sig'", "'datasig'",
];
CashScriptParser._SYMBOLIC_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "VersionLiteral", "BooleanLiteral", "NumberUnit",
    "NumberLiteral", "Bytes", "Bound", "StringLiteral", "DateLiteral", "HexLiteral",
    "TxVar", "NullaryOp", "Identifier", "WHITESPACE", "COMMENT", "LINE_COMMENT",
];
CashScriptParser.VOCABULARY = new VocabularyImpl(CashScriptParser._LITERAL_NAMES, CashScriptParser._SYMBOLIC_NAMES, []);
CashScriptParser._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03Y\u016C\x04\x02" +
    "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
    "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
    "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
    "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04" +
    "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x03" +
    "\x02\x07\x02:\n\x02\f\x02\x0E\x02=\v\x02\x03\x02\x07\x02@\n\x02\f\x02" +
    "\x0E\x02C\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x04\x03\x04\x03\x05\x03\x05\x05\x05P\n\x05\x03\x06\x05\x06S\n\x06" +
    "\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x07\b^" +
    "\n\b\f\b\x0E\ba\v\b\x03\b\x07\bd\n\b\f\b\x0E\bg\v\b\x03\b\x03\b\x03\t" +
    "\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x07\nr\n\n\f\n\x0E\nu\v\n\x03\n\x03" +
    "\n\x03\v\x03\v\x03\v\x03\v\x07\v}\n\v\f\v\x0E\v\x80\v\v\x03\v\x05\v\x83" +
    "\n\v\x05\v\x85\n\v\x03\v\x03\v\x03\f\x03\f\x07\f\x8B\n\f\f\f\x0E\f\x8E" +
    "\v\f\x03\f\x03\f\x03\r\x03\r\x07\r\x94\n\r\f\r\x0E\r\x97\v\r\x03\r\x03" +
    "\r\x05\r\x9B\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E" +
    "\xA3\n\x0E\x03\x0F\x03\x0F\x07\x0F\xA7\n\x0F\f\x0F\x0E\x0F\xAA\v\x0F\x03" +
    "\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
    "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
    "\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03" +
    "\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03" +
    "\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03" +
    "\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\xDF\n\x15\x03\x16" +
    "\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x07\x17\xE8\n\x17\f\x17" +
    "\x0E\x17\xEB\v\x17\x03\x17\x05\x17\xEE\n\x17\x05\x17\xF0\n\x17\x03\x17" +
    "\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18" +
    "\x03\x18\x03\x18\x05\x18\xFE\n\x18\x03\x18\x05\x18\u0101\n\x18\x03\x18" +
    "\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18" +
    "\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18" +
    "\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18" +
    "\x03\x18\x03\x18\x07\x18\u0121\n\x18\f\x18\x0E\x18\u0124\v\x18\x03\x18" +
    "\x05\x18\u0127\n\x18\x05\x18\u0129\n\x18\x03\x18\x03\x18\x03\x18\x03\x18" +
    "\x05\x18\u012F\n\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
    "\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
    "\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
    "\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
    "\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x07\x18\u0158\n\x18\f\x18" +
    "\x0E\x18\u015B\v\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03" +
    "\x1A\x05\x1A\u0164\n\x1A\x03\x1B\x03\x1B\x05\x1B\u0168\n\x1B\x03\x1C\x03" +
    "\x1C\x03\x1C\x02\x02\x03.\x1D\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02" +
    "\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02" +
    " \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x02\x02\x0F" +
    "\x03\x02\x06\f\x03\x02\x10\x11\x03\x02\x1B \x03\x02!%\x04\x02%%*/\x05" +
    "\x02%%*/14\x03\x0289\x03\x02:<\x04\x0299==\x03\x02\b\v\x03\x02>?\x03\x02" +
    "56\x04\x02EJOO\x02\u018A\x02;\x03\x02\x02\x02\x04F\x03\x02\x02\x02\x06" +
    "K\x03\x02\x02\x02\bM\x03\x02\x02\x02\nR\x03\x02\x02\x02\fV\x03\x02\x02" +
    "\x02\x0EX\x03\x02\x02\x02\x10j\x03\x02\x02\x02\x12l\x03\x02\x02\x02\x14" +
    "x\x03\x02\x02\x02\x16\x88\x03\x02\x02\x02\x18\x9A\x03\x02\x02\x02\x1A" +
    "\xA2\x03\x02\x02\x02\x1C\xA4\x03\x02\x02\x02\x1E\xB0\x03\x02\x02\x02 " +
    "\xB9\x03\x02\x02\x02\"\xBE\x03\x02\x02\x02$\xC6\x03\x02\x02\x02&\xCC\x03" +
    "\x02\x02\x02(\xD7\x03\x02\x02\x02*\xE0\x03\x02\x02\x02,\xE3\x03\x02\x02" +
    "\x02.\u012E\x03\x02\x02\x020\u015C\x03\x02\x02\x022\u0163\x03\x02\x02" +
    "\x024\u0165\x03\x02\x02\x026\u0169\x03\x02\x02\x028:\x05\x04\x03\x029" +
    "8\x03\x02\x02\x02:=\x03\x02\x02\x02;9\x03\x02\x02\x02;<\x03\x02\x02\x02" +
    "<A\x03\x02\x02\x02=;\x03\x02\x02\x02>@\x05\x0E\b\x02?>\x03\x02\x02\x02" +
    "@C\x03\x02\x02\x02A?\x03\x02\x02\x02AB\x03\x02\x02\x02BD\x03\x02\x02\x02" +
    "CA\x03\x02\x02\x02DE\x07\x02\x02\x03E\x03\x03\x02\x02\x02FG\x07\x03\x02" +
    "\x02GH\x05\x06\x04\x02HI\x05\b\x05\x02IJ\x07\x04\x02\x02J\x05\x03\x02" +
    "\x02\x02KL\x07\x05\x02\x02L\x07\x03\x02\x02\x02MO\x05\n\x06\x02NP\x05" +
    "\n\x06\x02ON\x03\x02\x02\x02OP\x03\x02\x02\x02P\t\x03\x02\x02\x02QS\x05" +
    "\f\x07\x02RQ\x03\x02\x02\x02RS\x03\x02\x02\x02ST\x03\x02\x02\x02TU\x07" +
    "K\x02\x02U\v\x03\x02\x02\x02VW\t\x02\x02\x02W\r\x03\x02\x02\x02XY\x07" +
    "\r\x02\x02YZ\x07V\x02\x02Z[\x05\x14\v\x02[_\x07\x0E\x02\x02\\^\x05\x0E" +
    "\b\x02]\\\x03\x02\x02\x02^a\x03\x02\x02\x02_]\x03\x02\x02\x02_`\x03\x02" +
    "\x02\x02`e\x03\x02\x02\x02a_\x03\x02\x02\x02bd\x05\x12\n\x02cb\x03\x02" +
    "\x02\x02dg\x03\x02\x02\x02ec\x03\x02\x02\x02ef\x03\x02\x02\x02fh\x03\x02" +
    "\x02\x02ge\x03\x02\x02\x02hi\x07\x0F\x02\x02i\x0F\x03\x02\x02\x02jk\t" +
    "\x03\x02\x02k\x11\x03\x02\x02\x02lm\x07\x12\x02\x02mn\x07V\x02\x02no\x05" +
    "\x14\v\x02os\x07\x0E\x02\x02pr\x05\x1A\x0E\x02qp\x03\x02\x02\x02ru\x03" +
    "\x02\x02\x02sq\x03\x02\x02\x02st\x03\x02\x02\x02tv\x03\x02\x02\x02us\x03" +
    "\x02\x02\x02vw\x07\x0F\x02\x02w\x13\x03\x02\x02\x02x\x84\x07\x13\x02\x02" +
    "y~\x05\x16\f\x02z{\x07\x14\x02\x02{}\x05\x16\f\x02|z\x03\x02\x02\x02}" +
    "\x80\x03\x02\x02\x02~|\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F\x82\x03" +
    "\x02\x02\x02\x80~\x03\x02\x02\x02\x81\x83\x07\x14\x02\x02\x82\x81\x03" +
    "\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83\x85\x03\x02\x02\x02\x84y\x03" +
    "\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x87\x07" +
    "\x15\x02\x02\x87\x15\x03\x02\x02\x02\x88\x8C\x056\x1C\x02\x89\x8B\x05" +
    "\x10\t\x02\x8A\x89\x03\x02\x02\x02\x8B\x8E\x03\x02\x02\x02\x8C\x8A\x03" +
    "\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x8F\x03\x02\x02\x02\x8E\x8C\x03" +
    "\x02\x02\x02\x8F\x90\x07V\x02\x02\x90\x17\x03\x02\x02\x02\x91\x95\x07" +
    "\x0E\x02\x02\x92\x94\x05\x1A\x0E\x02\x93\x92\x03\x02\x02\x02\x94\x97\x03" +
    "\x02\x02\x02\x95\x93\x03\x02\x02\x02\x95\x96\x03\x02\x02\x02\x96\x98\x03" +
    "\x02\x02\x02\x97\x95\x03\x02\x02\x02\x98\x9B\x07\x0F\x02\x02\x99\x9B\x05" +
    "\x1A\x0E\x02\x9A\x91\x03\x02\x02\x02\x9A\x99\x03\x02\x02\x02\x9B\x19\x03" +
    "\x02\x02\x02\x9C\xA3\x05\x1C\x0F\x02\x9D\xA3\x05\x1E\x10\x02\x9E\xA3\x05" +
    " \x11\x02\x9F\xA3\x05\"\x12\x02\xA0\xA3\x05$\x13\x02\xA1\xA3\x05(\x15" +
    "\x02\xA2\x9C\x03\x02\x02\x02\xA2\x9D\x03\x02\x02\x02\xA2\x9E\x03\x02\x02" +
    "\x02\xA2\x9F\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2\xA1\x03\x02\x02" +
    "\x02\xA3\x1B\x03\x02\x02\x02\xA4\xA8\x056\x1C\x02\xA5\xA7\x050\x19\x02" +
    "\xA6\xA5\x03\x02\x02\x02\xA7\xAA\x03\x02\x02\x02\xA8\xA6\x03\x02\x02\x02" +
    "\xA8\xA9\x03\x02\x02\x02\xA9\xAB\x03\x02\x02\x02\xAA\xA8\x03\x02\x02\x02" +
    "\xAB\xAC\x07V\x02\x02\xAC\xAD\x07\f\x02\x02\xAD\xAE\x05.\x18\x02\xAE\xAF" +
    "\x07\x04\x02\x02\xAF\x1D\x03\x02\x02\x02\xB0\xB1\x056\x1C\x02\xB1\xB2" +
    "\x07V\x02\x02\xB2\xB3\x07\x14\x02\x02\xB3\xB4\x056\x1C\x02\xB4\xB5\x07" +
    "V\x02\x02\xB5\xB6\x07\f\x02\x02\xB6\xB7\x05.\x18\x02\xB7\xB8\x07\x04\x02" +
    "\x02\xB8\x1F\x03\x02\x02\x02\xB9\xBA\x07V\x02\x02\xBA\xBB\x07\f\x02\x02" +
    "\xBB\xBC\x05.\x18\x02\xBC\xBD\x07\x04\x02\x02\xBD!\x03\x02\x02\x02\xBE" +
    "\xBF\x07\x16\x02\x02\xBF\xC0\x07\x13\x02\x02\xC0\xC1\x07T\x02\x02\xC1" +
    "\xC2\x07\b\x02\x02\xC2\xC3\x05.\x18\x02\xC3\xC4\x07\x15\x02\x02\xC4\xC5" +
    "\x07\x04\x02\x02\xC5#\x03\x02\x02\x02\xC6\xC7\x07\x16\x02\x02\xC7\xC8" +
    "\x07\x13\x02\x02\xC8\xC9\x05.\x18\x02\xC9\xCA\x07\x15\x02\x02\xCA\xCB" +
    "\x07\x04\x02\x02\xCB%\x03\x02\x02\x02\xCC\xCD\x07\x17\x02\x02\xCD\xCE" +
    "\x07\x13\x02\x02\xCE\xCF\x07N\x02\x02\xCF\xD0\x07\x14\x02\x02\xD0\xD1" +
    "\x05.\x18\x02\xD1\xD2\x07\x14\x02\x02\xD2\xD3\x05.\x18\x02\xD3\xD4\x07" +
    "\x14\x02\x02\xD4\xD5\x05.\x18\x02\xD5\xD6\x07\x15\x02\x02\xD6\'\x03\x02" +
    "\x02\x02\xD7\xD8\x07\x18\x02\x02\xD8\xD9\x07\x13\x02\x02\xD9\xDA\x05." +
    "\x18\x02\xDA\xDB\x07\x15\x02\x02\xDB\xDE\x05\x18\r\x02\xDC\xDD\x07\x19" +
    "\x02\x02\xDD\xDF\x05\x18\r\x02\xDE\xDC\x03\x02\x02\x02\xDE\xDF\x03\x02" +
    "\x02\x02\xDF)\x03\x02\x02\x02\xE0\xE1\x07V\x02\x02\xE1\xE2\x05,\x17\x02" +
    "\xE2+\x03\x02\x02\x02\xE3\xEF\x07\x13\x02\x02\xE4\xE9\x05.\x18\x02\xE5" +
    "\xE6\x07\x14\x02\x02\xE6\xE8\x05.\x18\x02\xE7\xE5\x03\x02\x02\x02\xE8" +
    "\xEB\x03\x02\x02\x02\xE9\xE7\x03\x02\x02\x02\xE9\xEA\x03\x02\x02\x02\xEA" +
    "\xED\x03\x02\x02\x02\xEB\xE9\x03\x02\x02\x02\xEC\xEE\x07\x14\x02\x02\xED" +
    "\xEC\x03\x02\x02\x02\xED\xEE\x03\x02\x02\x02\xEE\xF0\x03\x02\x02\x02\xEF" +
    "\xE4\x03\x02\x02\x02\xEF\xF0\x03\x02\x02\x02\xF0\xF1\x03\x02\x02\x02\xF1" +
    "\xF2\x07\x15\x02\x02\xF2-\x03\x02\x02\x02\xF3\xF4\b\x18\x01\x02\xF4\xF5" +
    "\x07\x13\x02\x02\xF5\xF6\x05.\x18\x02\xF6\xF7\x07\x15\x02\x02\xF7\u012F" +
    "\x03\x02\x02\x02\xF8\xF9\x056\x1C\x02\xF9\xFA\x07\x13\x02\x02\xFA\xFD" +
    "\x05.\x18\x02\xFB\xFC\x07\x14\x02\x02\xFC\xFE\x05.\x18\x02\xFD\xFB\x03" +
    "\x02\x02\x02\xFD\xFE\x03\x02\x02\x02\xFE\u0100\x03\x02\x02\x02\xFF\u0101" +
    "\x07\x14\x02\x02\u0100\xFF\x03\x02\x02\x02\u0100\u0101\x03\x02\x02\x02" +
    "\u0101\u0102\x03\x02\x02\x02\u0102\u0103\x07\x15\x02\x02\u0103\u012F\x03" +
    "\x02\x02\x02\u0104\u012F\x05*\x16\x02\u0105\u012F\x05&\x14\x02\u0106\u0107" +
    "\x07\x1A\x02\x02\u0107\u0108\t\x04\x02\x02\u0108\u012F\x05,\x17\x02\u0109" +
    "\u010A\x07V\x02\x02\u010A\u012F\t\x05\x02\x02\u010B\u010C\x07&\x02\x02" +
    "\u010C\u010D\x07V\x02\x02\u010D\u012F\x05,\x17\x02\u010E\u010F\x07)\x02" +
    "\x02\u010F\u0110\x07\'\x02\x02\u0110\u0111\x05.\x18\x02\u0111\u0112\x07" +
    "(\x02\x02\u0112\u0113\t\x06\x02\x02\u0113\u012F\x03\x02\x02\x02\u0114" +
    "\u0115\x070\x02\x02\u0115\u0116\x07\'\x02\x02\u0116\u0117\x05.\x18\x02" +
    "\u0117\u0118\x07(\x02\x02\u0118\u0119\t\x07\x02\x02\u0119\u012F\x03\x02" +
    "\x02\x02\u011A\u011B\t\b\x02\x02\u011B\u012F\x05.\x18\x10\u011C\u0128" +
    "\x07\'\x02\x02\u011D\u0122\x05.\x18\x02\u011E\u011F\x07\x14\x02\x02\u011F" +
    "\u0121\x05.\x18\x02\u0120\u011E\x03\x02\x02\x02\u0121\u0124\x03\x02\x02" +
    "\x02\u0122\u0120\x03\x02\x02\x02\u0122\u0123\x03\x02\x02\x02\u0123\u0126" +
    "\x03\x02\x02\x02\u0124\u0122\x03\x02\x02\x02\u0125\u0127\x07\x14\x02\x02" +
    "\u0126\u0125\x03\x02\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u0129\x03" +
    "\x02\x02\x02\u0128\u011D\x03\x02\x02\x02\u0128\u0129\x03\x02\x02\x02\u0129" +
    "\u012A\x03\x02\x02\x02\u012A\u012F\x07(\x02\x02\u012B\u012F\x07U\x02\x02" +
    "\u012C\u012F\x07V\x02\x02\u012D\u012F\x052\x1A\x02\u012E\xF3\x03\x02\x02" +
    "\x02\u012E\xF8\x03\x02\x02\x02\u012E\u0104\x03\x02\x02\x02\u012E\u0105" +
    "\x03\x02\x02\x02\u012E\u0106\x03\x02\x02\x02\u012E\u0109\x03\x02\x02\x02" +
    "\u012E\u010B\x03\x02\x02\x02\u012E\u010E\x03\x02\x02\x02\u012E\u0114\x03" +
    "\x02\x02\x02\u012E\u011A\x03\x02\x02\x02\u012E\u011C\x03\x02\x02\x02\u012E" +
    "\u012B\x03\x02\x02\x02\u012E\u012C\x03\x02\x02\x02\u012E\u012D\x03\x02" +
    "\x02\x02\u012F\u0159\x03\x02\x02\x02\u0130\u0131\f\x0F\x02\x02\u0131\u0132" +
    "\t\t\x02\x02\u0132\u0158\x05.\x18\x10\u0133\u0134\f\x0E\x02\x02\u0134" +
    "\u0135\t\n\x02\x02\u0135\u0158\x05.\x18\x0F\u0136\u0137\f\r\x02\x02\u0137" +
    "\u0138\t\v\x02\x02\u0138\u0158\x05.\x18\x0E\u0139\u013A\f\f\x02\x02\u013A" +
    "\u013B\t\f\x02\x02\u013B\u0158\x05.\x18\r\u013C\u013D\f\v\x02\x02\u013D" +
    "\u013E\x07@\x02\x02\u013E\u0158\x05.\x18\f\u013F\u0140\f\n\x02\x02\u0140" +
    "\u0141\x07\x06\x02\x02\u0141\u0158\x05.\x18\v\u0142\u0143\f\t\x02\x02" +
    "\u0143\u0144\x07A\x02\x02\u0144\u0158\x05.\x18\n\u0145\u0146\f\b\x02\x02" +
    "\u0146\u0147\x07B\x02\x02\u0147\u0158\x05.\x18\t\u0148\u0149\f\x07\x02" +
    "\x02\u0149\u014A\x07C\x02\x02\u014A\u0158\x05.\x18\b\u014B\u014C\f\x15" +
    "\x02\x02\u014C\u014D\x07\'\x02\x02\u014D\u014E\x07N\x02\x02\u014E\u0158" +
    "\x07(\x02\x02\u014F\u0150\f\x12\x02\x02\u0150\u0158\t\r\x02\x02\u0151" +
    "\u0152\f\x11\x02\x02\u0152\u0153\x077\x02\x02\u0153\u0154\x07\x13\x02" +
    "\x02\u0154\u0155\x05.\x18\x02\u0155\u0156\x07\x15\x02\x02\u0156\u0158" +
    "\x03\x02\x02\x02\u0157\u0130\x03\x02\x02\x02\u0157\u0133\x03\x02\x02\x02" +
    "\u0157\u0136\x03\x02\x02\x02\u0157\u0139\x03\x02\x02\x02\u0157\u013C\x03" +
    "\x02\x02\x02\u0157\u013F\x03\x02\x02\x02\u0157\u0142\x03\x02\x02\x02\u0157" +
    "\u0145\x03\x02\x02\x02\u0157\u0148\x03\x02\x02\x02\u0157\u014B\x03\x02" +
    "\x02\x02\u0157\u014F\x03\x02\x02\x02\u0157\u0151\x03\x02\x02\x02\u0158" +
    "\u015B\x03\x02\x02\x02\u0159\u0157\x03\x02\x02\x02\u0159\u015A\x03\x02" +
    "\x02\x02\u015A/\x03\x02\x02\x02\u015B\u0159\x03\x02\x02\x02\u015C\u015D" +
    "\x07D\x02\x02\u015D1\x03\x02\x02\x02\u015E\u0164\x07L\x02\x02\u015F\u0164" +
    "\x054\x1B\x02\u0160\u0164\x07Q\x02\x02\u0161\u0164\x07R\x02\x02\u0162" +
    "\u0164\x07S\x02\x02\u0163\u015E\x03\x02\x02\x02\u0163\u015F\x03\x02\x02" +
    "\x02\u0163\u0160\x03\x02\x02\x02\u0163\u0161\x03\x02\x02\x02\u0163\u0162" +
    "\x03\x02\x02\x02\u01643\x03\x02\x02\x02\u0165\u0167\x07N\x02\x02\u0166" +
    "\u0168\x07M\x02\x02\u0167\u0166\x03\x02\x02\x02\u0167\u0168\x03\x02\x02" +
    "\x02\u01685\x03\x02\x02\x02\u0169\u016A\t\x0E\x02\x02\u016A7\x03\x02\x02" +
    "\x02\x1F;AOR_es~\x82\x84\x8C\x95\x9A\xA2\xA8\xDE\xE9\xED\xEF\xFD\u0100" +
    "\u0122\u0126\u0128\u012E\u0157\u0159\u0163\u0167";
export class SourceFileContext extends ParserRuleContext {
    EOF() { return this.getToken(CashScriptParser.EOF, 0); }
    pragmaDirective(i) {
        if (i === undefined) {
            return this.getRuleContexts(PragmaDirectiveContext);
        }
        else {
            return this.getRuleContext(i, PragmaDirectiveContext);
        }
    }
    contractDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(ContractDefinitionContext);
        }
        else {
            return this.getRuleContext(i, ContractDefinitionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_sourceFile; }
    // @Override
    accept(visitor) {
        if (visitor.visitSourceFile) {
            return visitor.visitSourceFile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class PragmaDirectiveContext extends ParserRuleContext {
    pragmaName() {
        return this.getRuleContext(0, PragmaNameContext);
    }
    pragmaValue() {
        return this.getRuleContext(0, PragmaValueContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_pragmaDirective; }
    // @Override
    accept(visitor) {
        if (visitor.visitPragmaDirective) {
            return visitor.visitPragmaDirective(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class PragmaNameContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_pragmaName; }
    // @Override
    accept(visitor) {
        if (visitor.visitPragmaName) {
            return visitor.visitPragmaName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class PragmaValueContext extends ParserRuleContext {
    versionConstraint(i) {
        if (i === undefined) {
            return this.getRuleContexts(VersionConstraintContext);
        }
        else {
            return this.getRuleContext(i, VersionConstraintContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_pragmaValue; }
    // @Override
    accept(visitor) {
        if (visitor.visitPragmaValue) {
            return visitor.visitPragmaValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class VersionConstraintContext extends ParserRuleContext {
    VersionLiteral() { return this.getToken(CashScriptParser.VersionLiteral, 0); }
    versionOperator() {
        return this.tryGetRuleContext(0, VersionOperatorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_versionConstraint; }
    // @Override
    accept(visitor) {
        if (visitor.visitVersionConstraint) {
            return visitor.visitVersionConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class VersionOperatorContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_versionOperator; }
    // @Override
    accept(visitor) {
        if (visitor.visitVersionOperator) {
            return visitor.visitVersionOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ContractDefinitionContext extends ParserRuleContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    parameterList() {
        return this.getRuleContext(0, ParameterListContext);
    }
    contractDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(ContractDefinitionContext);
        }
        else {
            return this.getRuleContext(i, ContractDefinitionContext);
        }
    }
    functionDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(FunctionDefinitionContext);
        }
        else {
            return this.getRuleContext(i, FunctionDefinitionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_contractDefinition; }
    // @Override
    accept(visitor) {
        if (visitor.visitContractDefinition) {
            return visitor.visitContractDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterModifierContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_parameterModifier; }
    // @Override
    accept(visitor) {
        if (visitor.visitParameterModifier) {
            return visitor.visitParameterModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionDefinitionContext extends ParserRuleContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    parameterList() {
        return this.getRuleContext(0, ParameterListContext);
    }
    statement(i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_functionDefinition; }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionDefinition) {
            return visitor.visitFunctionDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterListContext extends ParserRuleContext {
    parameter(i) {
        if (i === undefined) {
            return this.getRuleContexts(ParameterContext);
        }
        else {
            return this.getRuleContext(i, ParameterContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_parameterList; }
    // @Override
    accept(visitor) {
        if (visitor.visitParameterList) {
            return visitor.visitParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterContext extends ParserRuleContext {
    typeName() {
        return this.getRuleContext(0, TypeNameContext);
    }
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    parameterModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ParameterModifierContext);
        }
        else {
            return this.getRuleContext(i, ParameterModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_parameter; }
    // @Override
    accept(visitor) {
        if (visitor.visitParameter) {
            return visitor.visitParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class BlockContext extends ParserRuleContext {
    statement(i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_block; }
    // @Override
    accept(visitor) {
        if (visitor.visitBlock) {
            return visitor.visitBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementContext extends ParserRuleContext {
    variableDefinition() {
        return this.tryGetRuleContext(0, VariableDefinitionContext);
    }
    tupleAssignment() {
        return this.tryGetRuleContext(0, TupleAssignmentContext);
    }
    assignStatement() {
        return this.tryGetRuleContext(0, AssignStatementContext);
    }
    timeOpStatement() {
        return this.tryGetRuleContext(0, TimeOpStatementContext);
    }
    requireStatement() {
        return this.tryGetRuleContext(0, RequireStatementContext);
    }
    ifStatement() {
        return this.tryGetRuleContext(0, IfStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_statement; }
    // @Override
    accept(visitor) {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class VariableDefinitionContext extends ParserRuleContext {
    typeName() {
        return this.getRuleContext(0, TypeNameContext);
    }
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    modifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModifierContext);
        }
        else {
            return this.getRuleContext(i, ModifierContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_variableDefinition; }
    // @Override
    accept(visitor) {
        if (visitor.visitVariableDefinition) {
            return visitor.visitVariableDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TupleAssignmentContext extends ParserRuleContext {
    typeName(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeNameContext);
        }
        else {
            return this.getRuleContext(i, TypeNameContext);
        }
    }
    Identifier(i) {
        if (i === undefined) {
            return this.getTokens(CashScriptParser.Identifier);
        }
        else {
            return this.getToken(CashScriptParser.Identifier, i);
        }
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_tupleAssignment; }
    // @Override
    accept(visitor) {
        if (visitor.visitTupleAssignment) {
            return visitor.visitTupleAssignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class AssignStatementContext extends ParserRuleContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_assignStatement; }
    // @Override
    accept(visitor) {
        if (visitor.visitAssignStatement) {
            return visitor.visitAssignStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimeOpStatementContext extends ParserRuleContext {
    TxVar() { return this.getToken(CashScriptParser.TxVar, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_timeOpStatement; }
    // @Override
    accept(visitor) {
        if (visitor.visitTimeOpStatement) {
            return visitor.visitTimeOpStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class RequireStatementContext extends ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_requireStatement; }
    // @Override
    accept(visitor) {
        if (visitor.visitRequireStatement) {
            return visitor.visitRequireStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class MerkleRootMacroContext extends ParserRuleContext {
    NumberLiteral() { return this.getToken(CashScriptParser.NumberLiteral, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_merkleRootMacro; }
    // @Override
    accept(visitor) {
        if (visitor.visitMerkleRootMacro) {
            return visitor.visitMerkleRootMacro(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class IfStatementContext extends ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    block(i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockContext);
        }
        else {
            return this.getRuleContext(i, BlockContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_ifStatement; }
    // @Override
    accept(visitor) {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends ParserRuleContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    expressionList() {
        return this.getRuleContext(0, ExpressionListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_functionCall; }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExpressionListContext extends ParserRuleContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_expressionList; }
    // @Override
    accept(visitor) {
        if (visitor.visitExpressionList) {
            return visitor.visitExpressionList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExpressionContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_expression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
export class ParenthesisedContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParenthesised) {
            return visitor.visitParenthesised(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends ExpressionContext {
    typeName() {
        return this.getRuleContext(0, TypeNameContext);
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallExpressionContext extends ExpressionContext {
    functionCall() {
        return this.tryGetRuleContext(0, FunctionCallContext);
    }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionCallExpression) {
            return visitor.visitFunctionCallExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class MerkleRootMacroExpressionContext extends ExpressionContext {
    merkleRootMacro() {
        return this.getRuleContext(0, MerkleRootMacroContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMerkleRootMacroExpression) {
            return visitor.visitMerkleRootMacroExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ContractAccessorContext extends ExpressionContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitContractAccessor) {
            return visitor.visitContractAccessor(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class InstantiationContext extends ExpressionContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    expressionList() {
        return this.getRuleContext(0, ExpressionListContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInstantiation) {
            return visitor.visitInstantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TupleIndexOpContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    NumberLiteral() { return this.getToken(CashScriptParser.NumberLiteral, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTupleIndexOp) {
            return visitor.visitTupleIndexOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnaryIntrospectionOpContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnaryIntrospectionOp) {
            return visitor.visitUnaryIntrospectionOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnaryOpContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnaryOp) {
            return visitor.visitUnaryOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryOpContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBinaryOp) {
            return visitor.visitBinaryOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArray) {
            return visitor.visitArray(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullaryOpContext extends ExpressionContext {
    NullaryOp() { return this.getToken(CashScriptParser.NullaryOp, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNullaryOp) {
            return visitor.visitNullaryOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierContext extends ExpressionContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class LiteralExpressionContext extends ExpressionContext {
    literal() {
        return this.getRuleContext(0, LiteralContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLiteralExpression) {
            return visitor.visitLiteralExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifierContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_modifier; }
    // @Override
    accept(visitor) {
        if (visitor.visitModifier) {
            return visitor.visitModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class LiteralContext extends ParserRuleContext {
    BooleanLiteral() { return this.tryGetToken(CashScriptParser.BooleanLiteral, 0); }
    numberLiteral() {
        return this.tryGetRuleContext(0, NumberLiteralContext);
    }
    StringLiteral() { return this.tryGetToken(CashScriptParser.StringLiteral, 0); }
    DateLiteral() { return this.tryGetToken(CashScriptParser.DateLiteral, 0); }
    HexLiteral() { return this.tryGetToken(CashScriptParser.HexLiteral, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_literal; }
    // @Override
    accept(visitor) {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumberLiteralContext extends ParserRuleContext {
    NumberLiteral() { return this.getToken(CashScriptParser.NumberLiteral, 0); }
    NumberUnit() { return this.tryGetToken(CashScriptParser.NumberUnit, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_numberLiteral; }
    // @Override
    accept(visitor) {
        if (visitor.visitNumberLiteral) {
            return visitor.visitNumberLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeNameContext extends ParserRuleContext {
    Bytes() { return this.getToken(CashScriptParser.Bytes, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_typeName; }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeName) {
            return visitor.visitTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
//# sourceMappingURL=CashScriptParser.js.map