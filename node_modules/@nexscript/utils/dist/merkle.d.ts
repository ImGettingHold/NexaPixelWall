/// <reference types="node" />
export declare const ulog2: (u: number) => number;
export declare const ToCompactProof: (fullProof: Array<Uint8Array>, elementIndex: number) => Array<Uint8Array>;
export declare const ToFullProof: (leafHash: Uint8Array, compactProof: Array<Uint8Array>, elementIndex: number) => {
    fullProof: Array<Uint8Array>;
    root: Uint8Array;
};
export declare const GetNewCompactProof: (prevLeafHash: Uint8Array, prevCompactProof: Array<Uint8Array>, prevIndex: number) => Array<Uint8Array>;
export declare const ComputeMerkleRootFromBranch: (leaf: Uint8Array, merkleBranch: Array<Uint8Array>, nIndex: number) => Uint8Array;
export declare function SerializeProof(proof: Array<Uint8Array>): string;
export declare function SerializeProof(proof: Array<{
    position: 'left' | 'right';
    data: Buffer;
}>): string;
export declare const MerkleHash160: (value: string | Buffer) => Buffer;
export declare const GetMerkleParams: (hashes: Buffer[], leafIndex: number, hash?: any) => {
    root: string;
    serializedProof: string;
};
