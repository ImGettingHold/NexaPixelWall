export declare const Op: {
    OP_PLACE: number;
    OP_PUSH_TX_STATE: number;
    OP_SETBMD: number;
    OP_BIN2BIGNUM: number;
    OP_EXEC: number;
    OP_0: import("@bitauth/libauth").OpcodesBCH2023.OP_0;
    OP_PUSHBYTES_1: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_1;
    OP_PUSHBYTES_2: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_2;
    OP_PUSHBYTES_3: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_3;
    OP_PUSHBYTES_4: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_4;
    OP_PUSHBYTES_5: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_5;
    OP_PUSHBYTES_6: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_6;
    OP_PUSHBYTES_7: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_7;
    OP_PUSHBYTES_8: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_8;
    OP_PUSHBYTES_9: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_9;
    OP_PUSHBYTES_10: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_10;
    OP_PUSHBYTES_11: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_11;
    OP_PUSHBYTES_12: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_12;
    OP_PUSHBYTES_13: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_13;
    OP_PUSHBYTES_14: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_14;
    OP_PUSHBYTES_15: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_15;
    OP_PUSHBYTES_16: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_16;
    OP_PUSHBYTES_17: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_17;
    OP_PUSHBYTES_18: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_18;
    OP_PUSHBYTES_19: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_19;
    OP_PUSHBYTES_20: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_20;
    OP_PUSHBYTES_21: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_21;
    OP_PUSHBYTES_22: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_22;
    OP_PUSHBYTES_23: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_23;
    OP_PUSHBYTES_24: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_24;
    OP_PUSHBYTES_25: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_25;
    OP_PUSHBYTES_26: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_26;
    OP_PUSHBYTES_27: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_27;
    OP_PUSHBYTES_28: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_28;
    OP_PUSHBYTES_29: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_29;
    OP_PUSHBYTES_30: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_30;
    OP_PUSHBYTES_31: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_31;
    OP_PUSHBYTES_32: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_32;
    OP_PUSHBYTES_33: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_33;
    OP_PUSHBYTES_34: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_34;
    OP_PUSHBYTES_35: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_35;
    OP_PUSHBYTES_36: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_36;
    OP_PUSHBYTES_37: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_37;
    OP_PUSHBYTES_38: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_38;
    OP_PUSHBYTES_39: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_39;
    OP_PUSHBYTES_40: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_40;
    OP_PUSHBYTES_41: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_41;
    OP_PUSHBYTES_42: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_42;
    OP_PUSHBYTES_43: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_43;
    OP_PUSHBYTES_44: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_44;
    OP_PUSHBYTES_45: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_45;
    OP_PUSHBYTES_46: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_46;
    OP_PUSHBYTES_47: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_47;
    OP_PUSHBYTES_48: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_48;
    OP_PUSHBYTES_49: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_49;
    OP_PUSHBYTES_50: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_50;
    OP_PUSHBYTES_51: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_51;
    OP_PUSHBYTES_52: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_52;
    OP_PUSHBYTES_53: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_53;
    OP_PUSHBYTES_54: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_54;
    OP_PUSHBYTES_55: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_55;
    OP_PUSHBYTES_56: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_56;
    OP_PUSHBYTES_57: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_57;
    OP_PUSHBYTES_58: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_58;
    OP_PUSHBYTES_59: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_59;
    OP_PUSHBYTES_60: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_60;
    OP_PUSHBYTES_61: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_61;
    OP_PUSHBYTES_62: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_62;
    OP_PUSHBYTES_63: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_63;
    OP_PUSHBYTES_64: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_64;
    OP_PUSHBYTES_65: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_65;
    OP_PUSHBYTES_66: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_66;
    OP_PUSHBYTES_67: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_67;
    OP_PUSHBYTES_68: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_68;
    OP_PUSHBYTES_69: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_69;
    OP_PUSHBYTES_70: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_70;
    OP_PUSHBYTES_71: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_71;
    OP_PUSHBYTES_72: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_72;
    OP_PUSHBYTES_73: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_73;
    OP_PUSHBYTES_74: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_74;
    OP_PUSHBYTES_75: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHBYTES_75;
    OP_PUSHDATA_1: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHDATA_1;
    OP_PUSHDATA_2: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHDATA_2;
    OP_PUSHDATA_4: import("@bitauth/libauth").OpcodesBCH2023.OP_PUSHDATA_4;
    OP_1NEGATE: import("@bitauth/libauth").OpcodesBCH2023.OP_1NEGATE;
    OP_RESERVED: import("@bitauth/libauth").OpcodesBCH2023.OP_RESERVED;
    OP_1: import("@bitauth/libauth").OpcodesBCH2023.OP_1;
    OP_2: import("@bitauth/libauth").OpcodesBCH2023.OP_2;
    OP_3: import("@bitauth/libauth").OpcodesBCH2023.OP_3;
    OP_4: import("@bitauth/libauth").OpcodesBCH2023.OP_4;
    OP_5: import("@bitauth/libauth").OpcodesBCH2023.OP_5;
    OP_6: import("@bitauth/libauth").OpcodesBCH2023.OP_6;
    OP_7: import("@bitauth/libauth").OpcodesBCH2023.OP_7;
    OP_8: import("@bitauth/libauth").OpcodesBCH2023.OP_8;
    OP_9: import("@bitauth/libauth").OpcodesBCH2023.OP_9;
    OP_10: import("@bitauth/libauth").OpcodesBCH2023.OP_10;
    OP_11: import("@bitauth/libauth").OpcodesBCH2023.OP_11;
    OP_12: import("@bitauth/libauth").OpcodesBCH2023.OP_12;
    OP_13: import("@bitauth/libauth").OpcodesBCH2023.OP_13;
    OP_14: import("@bitauth/libauth").OpcodesBCH2023.OP_14;
    OP_15: import("@bitauth/libauth").OpcodesBCH2023.OP_15;
    OP_16: import("@bitauth/libauth").OpcodesBCH2023.OP_16;
    OP_NOP: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP;
    OP_VER: import("@bitauth/libauth").OpcodesBCH2023.OP_VER;
    OP_IF: import("@bitauth/libauth").OpcodesBCH2023.OP_IF;
    OP_NOTIF: import("@bitauth/libauth").OpcodesBCH2023.OP_NOTIF;
    OP_VERIF: import("@bitauth/libauth").OpcodesBCH2023.OP_VERIF;
    OP_VERNOTIF: import("@bitauth/libauth").OpcodesBCH2023.OP_VERNOTIF;
    OP_ELSE: import("@bitauth/libauth").OpcodesBCH2023.OP_ELSE;
    OP_ENDIF: import("@bitauth/libauth").OpcodesBCH2023.OP_ENDIF;
    OP_VERIFY: import("@bitauth/libauth").OpcodesBCH2023.OP_VERIFY;
    OP_RETURN: import("@bitauth/libauth").OpcodesBCH2023.OP_RETURN;
    OP_TOALTSTACK: import("@bitauth/libauth").OpcodesBCH2023.OP_TOALTSTACK;
    OP_FROMALTSTACK: import("@bitauth/libauth").OpcodesBCH2023.OP_FROMALTSTACK;
    OP_2DROP: import("@bitauth/libauth").OpcodesBCH2023.OP_2DROP;
    OP_2DUP: import("@bitauth/libauth").OpcodesBCH2023.OP_2DUP;
    OP_3DUP: import("@bitauth/libauth").OpcodesBCH2023.OP_3DUP;
    OP_2OVER: import("@bitauth/libauth").OpcodesBCH2023.OP_2OVER;
    OP_2ROT: import("@bitauth/libauth").OpcodesBCH2023.OP_2ROT;
    OP_2SWAP: import("@bitauth/libauth").OpcodesBCH2023.OP_2SWAP;
    OP_IFDUP: import("@bitauth/libauth").OpcodesBCH2023.OP_IFDUP;
    OP_DEPTH: import("@bitauth/libauth").OpcodesBCH2023.OP_DEPTH;
    OP_DROP: import("@bitauth/libauth").OpcodesBCH2023.OP_DROP;
    OP_DUP: import("@bitauth/libauth").OpcodesBCH2023.OP_DUP;
    OP_NIP: import("@bitauth/libauth").OpcodesBCH2023.OP_NIP;
    OP_OVER: import("@bitauth/libauth").OpcodesBCH2023.OP_OVER;
    OP_PICK: import("@bitauth/libauth").OpcodesBCH2023.OP_PICK;
    OP_ROLL: import("@bitauth/libauth").OpcodesBCH2023.OP_ROLL;
    OP_ROT: import("@bitauth/libauth").OpcodesBCH2023.OP_ROT;
    OP_SWAP: import("@bitauth/libauth").OpcodesBCH2023.OP_SWAP;
    OP_TUCK: import("@bitauth/libauth").OpcodesBCH2023.OP_TUCK;
    OP_CAT: import("@bitauth/libauth").OpcodesBCH2023.OP_CAT;
    OP_SPLIT: import("@bitauth/libauth").OpcodesBCH2023.OP_SPLIT;
    OP_NUM2BIN: import("@bitauth/libauth").OpcodesBCH2023.OP_NUM2BIN;
    OP_BIN2NUM: import("@bitauth/libauth").OpcodesBCH2023.OP_BIN2NUM;
    OP_SIZE: import("@bitauth/libauth").OpcodesBCH2023.OP_SIZE;
    OP_INVERT: import("@bitauth/libauth").OpcodesBCH2023.OP_INVERT;
    OP_AND: import("@bitauth/libauth").OpcodesBCH2023.OP_AND;
    OP_OR: import("@bitauth/libauth").OpcodesBCH2023.OP_OR;
    OP_XOR: import("@bitauth/libauth").OpcodesBCH2023.OP_XOR;
    OP_EQUAL: import("@bitauth/libauth").OpcodesBCH2023.OP_EQUAL;
    OP_EQUALVERIFY: import("@bitauth/libauth").OpcodesBCH2023.OP_EQUALVERIFY;
    OP_RESERVED1: import("@bitauth/libauth").OpcodesBCH2023.OP_RESERVED1;
    OP_RESERVED2: import("@bitauth/libauth").OpcodesBCH2023.OP_RESERVED2;
    OP_1ADD: import("@bitauth/libauth").OpcodesBCH2023.OP_1ADD;
    OP_1SUB: import("@bitauth/libauth").OpcodesBCH2023.OP_1SUB;
    OP_2MUL: import("@bitauth/libauth").OpcodesBCH2023.OP_2MUL;
    OP_2DIV: import("@bitauth/libauth").OpcodesBCH2023.OP_2DIV;
    OP_NEGATE: import("@bitauth/libauth").OpcodesBCH2023.OP_NEGATE;
    OP_ABS: import("@bitauth/libauth").OpcodesBCH2023.OP_ABS;
    OP_NOT: import("@bitauth/libauth").OpcodesBCH2023.OP_NOT;
    OP_0NOTEQUAL: import("@bitauth/libauth").OpcodesBCH2023.OP_0NOTEQUAL;
    OP_ADD: import("@bitauth/libauth").OpcodesBCH2023.OP_ADD;
    OP_SUB: import("@bitauth/libauth").OpcodesBCH2023.OP_SUB;
    OP_MUL: import("@bitauth/libauth").OpcodesBCH2023.OP_MUL;
    OP_DIV: import("@bitauth/libauth").OpcodesBCH2023.OP_DIV;
    OP_MOD: import("@bitauth/libauth").OpcodesBCH2023.OP_MOD;
    OP_LSHIFT: import("@bitauth/libauth").OpcodesBCH2023.OP_LSHIFT;
    OP_RSHIFT: import("@bitauth/libauth").OpcodesBCH2023.OP_RSHIFT;
    OP_BOOLAND: import("@bitauth/libauth").OpcodesBCH2023.OP_BOOLAND;
    OP_BOOLOR: import("@bitauth/libauth").OpcodesBCH2023.OP_BOOLOR;
    OP_NUMEQUAL: import("@bitauth/libauth").OpcodesBCH2023.OP_NUMEQUAL;
    OP_NUMEQUALVERIFY: import("@bitauth/libauth").OpcodesBCH2023.OP_NUMEQUALVERIFY;
    OP_NUMNOTEQUAL: import("@bitauth/libauth").OpcodesBCH2023.OP_NUMNOTEQUAL;
    OP_LESSTHAN: import("@bitauth/libauth").OpcodesBCH2023.OP_LESSTHAN;
    OP_GREATERTHAN: import("@bitauth/libauth").OpcodesBCH2023.OP_GREATERTHAN;
    OP_LESSTHANOREQUAL: import("@bitauth/libauth").OpcodesBCH2023.OP_LESSTHANOREQUAL;
    OP_GREATERTHANOREQUAL: import("@bitauth/libauth").OpcodesBCH2023.OP_GREATERTHANOREQUAL;
    OP_MIN: import("@bitauth/libauth").OpcodesBCH2023.OP_MIN;
    OP_MAX: import("@bitauth/libauth").OpcodesBCH2023.OP_MAX;
    OP_WITHIN: import("@bitauth/libauth").OpcodesBCH2023.OP_WITHIN;
    OP_RIPEMD160: import("@bitauth/libauth").OpcodesBCH2023.OP_RIPEMD160;
    OP_SHA1: import("@bitauth/libauth").OpcodesBCH2023.OP_SHA1;
    OP_SHA256: import("@bitauth/libauth").OpcodesBCH2023.OP_SHA256;
    OP_HASH160: import("@bitauth/libauth").OpcodesBCH2023.OP_HASH160;
    OP_HASH256: import("@bitauth/libauth").OpcodesBCH2023.OP_HASH256;
    OP_CODESEPARATOR: import("@bitauth/libauth").OpcodesBCH2023.OP_CODESEPARATOR;
    OP_CHECKSIG: import("@bitauth/libauth").OpcodesBCH2023.OP_CHECKSIG;
    OP_CHECKSIGVERIFY: import("@bitauth/libauth").OpcodesBCH2023.OP_CHECKSIGVERIFY;
    OP_CHECKMULTISIG: import("@bitauth/libauth").OpcodesBCH2023.OP_CHECKMULTISIG;
    OP_CHECKMULTISIGVERIFY: import("@bitauth/libauth").OpcodesBCH2023.OP_CHECKMULTISIGVERIFY;
    OP_NOP1: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP1;
    OP_CHECKLOCKTIMEVERIFY: import("@bitauth/libauth").OpcodesBCH2023.OP_CHECKLOCKTIMEVERIFY;
    OP_CHECKSEQUENCEVERIFY: import("@bitauth/libauth").OpcodesBCH2023.OP_CHECKSEQUENCEVERIFY;
    OP_NOP4: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP4;
    OP_NOP5: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP5;
    OP_NOP6: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP6;
    OP_NOP7: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP7;
    OP_NOP8: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP8;
    OP_NOP9: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP9;
    OP_NOP10: import("@bitauth/libauth").OpcodesBCH2023.OP_NOP10;
    OP_CHECKDATASIG: import("@bitauth/libauth").OpcodesBCH2023.OP_CHECKDATASIG;
    OP_CHECKDATASIGVERIFY: import("@bitauth/libauth").OpcodesBCH2023.OP_CHECKDATASIGVERIFY;
    OP_REVERSEBYTES: import("@bitauth/libauth").OpcodesBCH2023.OP_REVERSEBYTES;
    OP_UNKNOWN189: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN189;
    OP_UNKNOWN190: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN190;
    OP_UNKNOWN191: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN191;
    OP_INPUTINDEX: import("@bitauth/libauth").OpcodesBCH2023.OP_INPUTINDEX;
    OP_ACTIVEBYTECODE: import("@bitauth/libauth").OpcodesBCH2023.OP_ACTIVEBYTECODE;
    OP_TXVERSION: import("@bitauth/libauth").OpcodesBCH2023.OP_TXVERSION;
    OP_TXINPUTCOUNT: import("@bitauth/libauth").OpcodesBCH2023.OP_TXINPUTCOUNT;
    OP_TXOUTPUTCOUNT: import("@bitauth/libauth").OpcodesBCH2023.OP_TXOUTPUTCOUNT;
    OP_TXLOCKTIME: import("@bitauth/libauth").OpcodesBCH2023.OP_TXLOCKTIME;
    OP_UTXOVALUE: import("@bitauth/libauth").OpcodesBCH2023.OP_UTXOVALUE;
    OP_UTXOBYTECODE: import("@bitauth/libauth").OpcodesBCH2023.OP_UTXOBYTECODE;
    OP_OUTPOINTTXHASH: import("@bitauth/libauth").OpcodesBCH2023.OP_OUTPOINTTXHASH;
    OP_OUTPOINTINDEX: import("@bitauth/libauth").OpcodesBCH2023.OP_OUTPOINTINDEX;
    OP_INPUTBYTECODE: import("@bitauth/libauth").OpcodesBCH2023.OP_INPUTBYTECODE;
    OP_INPUTSEQUENCENUMBER: import("@bitauth/libauth").OpcodesBCH2023.OP_INPUTSEQUENCENUMBER;
    OP_OUTPUTVALUE: import("@bitauth/libauth").OpcodesBCH2023.OP_OUTPUTVALUE;
    OP_OUTPUTBYTECODE: import("@bitauth/libauth").OpcodesBCH2023.OP_OUTPUTBYTECODE;
    OP_UTXOTOKENCATEGORY: import("@bitauth/libauth").OpcodesBCH2023.OP_UTXOTOKENCATEGORY;
    OP_UTXOTOKENCOMMITMENT: import("@bitauth/libauth").OpcodesBCH2023.OP_UTXOTOKENCOMMITMENT;
    OP_UTXOTOKENAMOUNT: import("@bitauth/libauth").OpcodesBCH2023.OP_UTXOTOKENAMOUNT;
    OP_OUTPUTTOKENCATEGORY: import("@bitauth/libauth").OpcodesBCH2023.OP_OUTPUTTOKENCATEGORY;
    OP_OUTPUTTOKENCOMMITMENT: import("@bitauth/libauth").OpcodesBCH2023.OP_OUTPUTTOKENCOMMITMENT;
    OP_OUTPUTTOKENAMOUNT: import("@bitauth/libauth").OpcodesBCH2023.OP_OUTPUTTOKENAMOUNT;
    OP_UNKNOWN212: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN212;
    OP_UNKNOWN213: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN213;
    OP_UNKNOWN214: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN214;
    OP_UNKNOWN215: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN215;
    OP_UNKNOWN216: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN216;
    OP_UNKNOWN217: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN217;
    OP_UNKNOWN218: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN218;
    OP_UNKNOWN219: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN219;
    OP_UNKNOWN220: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN220;
    OP_UNKNOWN221: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN221;
    OP_UNKNOWN222: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN222;
    OP_UNKNOWN223: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN223;
    OP_UNKNOWN224: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN224;
    OP_UNKNOWN225: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN225;
    OP_UNKNOWN226: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN226;
    OP_UNKNOWN227: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN227;
    OP_UNKNOWN228: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN228;
    OP_UNKNOWN229: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN229;
    OP_UNKNOWN230: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN230;
    OP_UNKNOWN231: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN231;
    OP_UNKNOWN232: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN232;
    OP_UNKNOWN233: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN233;
    OP_UNKNOWN234: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN234;
    OP_UNKNOWN235: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN235;
    OP_UNKNOWN236: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN236;
    OP_UNKNOWN237: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN237;
    OP_UNKNOWN238: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN238;
    OP_UNKNOWN239: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN239;
    OP_UNKNOWN240: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN240;
    OP_UNKNOWN241: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN241;
    OP_UNKNOWN242: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN242;
    OP_UNKNOWN243: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN243;
    OP_UNKNOWN244: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN244;
    OP_UNKNOWN245: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN245;
    OP_UNKNOWN246: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN246;
    OP_UNKNOWN247: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN247;
    OP_UNKNOWN248: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN248;
    OP_UNKNOWN249: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN249;
    OP_UNKNOWN250: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN250;
    OP_UNKNOWN251: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN251;
    OP_UNKNOWN252: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN252;
    OP_UNKNOWN253: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN253;
    OP_UNKNOWN254: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN254;
    OP_UNKNOWN255: import("@bitauth/libauth").OpcodesBCH2023.OP_UNKNOWN255;
};
export type Op = number;
export type OpOrData = Op | Uint8Array;
export type Script = OpOrData[];
export declare function scriptToAsm(script: Script): string;
export declare function asmToScript(asm: string): Script;
export declare function scriptToBytecode(script: Script): Uint8Array;
export declare function bytecodeToScript(bytecode: Uint8Array): Script;
export declare function asmToBytecode(asm: string): Uint8Array;
export declare function bytecodeToAsm(bytecode: Uint8Array): string;
export declare function countOpcodes(script: Script): number;
export declare function calculateBytesize(script: Script): number;
export declare function encodeNullDataScript(chunks: OpOrData[]): Uint8Array;
/**
 * When cutting out the tx.bytecode preimage variable, the compiler does not know
 * the size of the final redeem scrip yet, because the constructor parameters still
 * need to get added. Because of this it does not know whether the VarInt is 1 or 3
 * bytes. During compilation, an OP_NOP is added at the spot where the bytecode is
 * cut out. This function replaces that OP_NOP and adds either 1 or 3 to the cut to
 * additionally cut off the VarInt.
 *
 * @param script incomplete redeem script
 * @returns completed redeem script
 */
export declare function replaceBytecodeNop(script: Script): Script;
export declare function generateRedeemScript(baseScript: Script, encodedArgs: Script): Script;
export declare function optimiseBytecode(script: Script, runs?: number): Script;
