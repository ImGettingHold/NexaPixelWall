/// <reference types="node" />
import { PathLike } from 'fs';
type Argument = bigint | boolean | string | Uint8Array;
export interface AbiInput {
    name: string;
    type: string;
    visible?: boolean;
    unused?: boolean;
}
export interface AbiFunction {
    name: string;
    covenant?: boolean;
    inputs: AbiInput[];
}
export interface SourceArtifact {
    contracts: ContractArtifact[];
    source: string;
    compiler: {
        name: string;
        version: string;
    };
    updatedAt: string;
}
export interface ContractArtifact {
    contractName: string;
    constructorInputs: AbiInput[];
    abi: AbiFunction[];
    dependencies?: string[];
    bytecode: string;
    contracts: ContractArtifact[];
}
export interface ContractDependency {
    constructorInputs: AbiInput[];
    constructorArgs: Argument[];
}
export interface ContractCreationParams {
    constraintHash: Uint8Array;
    visibleArgs: Uint8Array;
    lockingBytecode: Uint8Array;
}
export declare function importArtifact(artifactFile: PathLike): SourceArtifact;
export declare function exportArtifact(artifact: SourceArtifact, targetFile: string): void;
interface McpParams {
    artifact: ContractArtifact;
    parameterValues: Argument[];
}
export declare const prepareMcpContract: (contractName: string, functionName: string | undefined, mcpArtifact: ContractArtifact) => McpParams;
export {};
