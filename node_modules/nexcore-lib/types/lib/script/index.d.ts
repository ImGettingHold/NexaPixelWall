declare const _exports: {
    (from?: any): import("./script");
    new (from?: any): import("./script");
    fromBuffer(buffer: any): import("./script");
    fromASM(str: any): import("./script");
    fromHex(str: any): import("./script");
    fromString(str: any): import("./script");
    types: typeof import("./script").types;
    OP_RETURN_STANDARD_SIZE: number;
    outputIdentifiers: typeof import("./script").outputIdentifiers;
    inputIdentifiers: typeof import("./script").inputIdentifiers;
    buildEscrowOut(inputPublicKeys: import("../publickey")[], reclaimPublicKey: import("../publickey")): import("./script");
    buildMultisigOut(publicKeys: import("../publickey")[], threshold: number, opts?: any): import("./script");
    buildMultisigIn(pubkeys: import("../publickey")[], threshold: number, signatures: any[], opts?: any): import("./script");
    buildP2SHMultisigIn(pubkeys: import("../publickey")[], threshold: number, signatures: any[], opts?: any): import("./script");
    buildPublicKeyHashOut(to: import("../publickey") | import("../address")): import("./script");
    buildScriptTemplateOut(to: string | import("../publickey") | import("../address")): import("./script");
    buildGroupedPublicKeyTemplateOut(to: string | import("../publickey") | import("../address"), groupId: string | Buffer | import("../address"), groupAmount: bigint | Buffer): import("./script");
    buildGroupedScriptTemplateOut(to: string | import("../publickey") | import("../address"), groupId: string | Buffer | import("../address"), groupAmount: bigint | Buffer): import("./script");
    buildPublicKeyOut(pubkey: any): import("./script");
    buildDataOut(data: string | Buffer, encoding: string): import("./script");
    buildScriptHashOut(script: import("../address") | import("./script")): import("./script");
    buildPublicKeyIn(signature: Buffer | import("../crypto/signature"), sigtype?: number): import("./script");
    buildPublicKeyHashIn(publicKey: string | Buffer | import("../publickey"), signature: Buffer | import("../crypto/signature"), sigtype?: number): import("./script");
    buildPublicKeyTemplateIn(publicKey: string | Buffer | import("../publickey"), signature: Buffer | import("../crypto/signature"), sigtype?: number): import("./script");
    buildScriptTemplateIn(template: import("./script"), constraint: import("../opcode") | import("./script"), satisfier: Buffer | import("./script"), sigtype?: number): import("./script");
    buildEscrowIn(publicKey: import("../publickey"), signature: import("../crypto/signature"), redeemScript: import("./script")): import("./script");
    empty(): import("./script");
    fromAddress(address: any): import("./script");
    Interpreter: typeof import("./interpreter");
};
export = _exports;
export const Interpreter: typeof import("./interpreter");
//# sourceMappingURL=index.d.ts.map